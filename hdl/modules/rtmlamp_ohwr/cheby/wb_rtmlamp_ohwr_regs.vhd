-------------------------------------------------------------------------------
-- Title          : Wishbone slave core for RTM LAMP registers
-------------------------------------------------------------------------------
-- File           : rtmlamp_ohwr_regs.vhdl
-- Author         : auto-generated by wbgen2 from rtmlamp_ohwr_regs.wb
-- Created        : Fri Mar 05 15:12:42 2021
-- Standard       : VHDL'87
-------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE rtmlamp_ohwr_regs.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity wb_rtmlamp_ohwr_regs is
  port (
    rst_n_i              : in    std_logic;
    clk_sys_i            : in    std_logic;
    wb_adr_i             : in    std_logic_vector(6 downto 0);
    wb_dat_i             : in    std_logic_vector(31 downto 0);
    wb_dat_o             : out   std_logic_vector(31 downto 0);
    wb_cyc_i             : in    std_logic;
    wb_sel_i             : in    std_logic_vector(3 downto 0);
    wb_stb_i             : in    std_logic;
    wb_we_i              : in    std_logic;
    wb_ack_o             : out   std_logic;
    wb_stall_o           : out   std_logic;
    dac_master_clk_i     : in    std_logic;
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'reserved' in reg: 'General RTM status register'
    rtmlamp_ohwr_regs_sta_reserved_i : in    std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) BIT field: 'Use data from WB for DACs' in reg: 'General RTM control register'
    rtmlamp_ohwr_regs_ctl_dac_data_from_wb_o : out   std_logic;
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'reserved' in reg: 'General RTM control register'
    rtmlamp_ohwr_regs_ctl_reserved_i : in    std_logic_vector(30 downto 0);
    -- Port for BIT field: 'Amplifier Left Current Limit Flag (IFLAG_L)' in reg: 'Channel 0 status register'
    rtmlamp_ohwr_regs_ch_0_sta_amp_iflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Left Thermal Limit Flag (TFLAG_L)' in reg: 'Channel 0 status register'
    rtmlamp_ohwr_regs_ch_0_sta_amp_tflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Current Limit Flag (IFLAG_R)' in reg: 'Channel 0 status register'
    rtmlamp_ohwr_regs_ch_0_sta_amp_iflag_r_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Thermal Limit Flag (TFLAG_R)' in reg: 'Channel 0 status register'
    rtmlamp_ohwr_regs_ch_0_sta_amp_tflag_r_i : in    std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 0 status register'
    rtmlamp_ohwr_regs_ch_0_sta_reserved_i : in    std_logic_vector(27 downto 0);
    -- Port for BIT field: 'Amplifier Enable' in reg: 'Channel 0 control register'
    rtmlamp_ohwr_regs_ch_0_ctl_amp_en_o : out   std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 0 control register'
    rtmlamp_ohwr_regs_ch_0_ctl_reserved_o : out   std_logic_vector(30 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'DAC data' in reg: 'DAC channel 0 control register'
    rtmlamp_ohwr_regs_ch_0_dac_data_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) MONOSTABLE field: 'Write DAC data to external CI' in reg: 'DAC channel 0 control register'
    rtmlamp_ohwr_regs_ch_0_dac_wr_o : out   std_logic;
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'reserved' in reg: 'DAC channel 0 control register'
    rtmlamp_ohwr_regs_ch_0_dac_reserved_o : out   std_logic_vector(14 downto 0);
    -- Port for BIT field: 'Amplifier Left Current Limit Flag (IFLAG_L)' in reg: 'Channel 1 status register'
    rtmlamp_ohwr_regs_ch_1_sta_amp_iflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Left Thermal Limit Flag (TFLAG_L)' in reg: 'Channel 1 status register'
    rtmlamp_ohwr_regs_ch_1_sta_amp_tflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Current Limit Flag (IFLAG_R)' in reg: 'Channel 1 status register'
    rtmlamp_ohwr_regs_ch_1_sta_amp_iflag_r_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Thermal Limit Flag (TFLAG_R)' in reg: 'Channel 1 status register'
    rtmlamp_ohwr_regs_ch_1_sta_amp_tflag_r_i : in    std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 1 status register'
    rtmlamp_ohwr_regs_ch_1_sta_reserved_i : in    std_logic_vector(27 downto 0);
    -- Port for BIT field: 'Amplifier Enable' in reg: 'Channel 1 control register'
    rtmlamp_ohwr_regs_ch_1_ctl_amp_en_o : out   std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 1 control register'
    rtmlamp_ohwr_regs_ch_1_ctl_reserved_o : out   std_logic_vector(30 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'DAC data' in reg: 'DAC channel 1 control register'
    rtmlamp_ohwr_regs_ch_1_dac_data_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) MONOSTABLE field: 'Write DAC data to external CI' in reg: 'DAC channel 1 control register'
    rtmlamp_ohwr_regs_ch_1_dac_wr_o : out   std_logic;
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'reserved' in reg: 'DAC channel 1 control register'
    rtmlamp_ohwr_regs_ch_1_dac_reserved_o : out   std_logic_vector(14 downto 0);
    -- Port for BIT field: 'Amplifier Left Current Limit Flag (IFLAG_L)' in reg: 'Channel 2 status register'
    rtmlamp_ohwr_regs_ch_2_sta_amp_iflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Left Thermal Limit Flag (TFLAG_L)' in reg: 'Channel 2 status register'
    rtmlamp_ohwr_regs_ch_2_sta_amp_tflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Current Limit Flag (IFLAG_R)' in reg: 'Channel 2 status register'
    rtmlamp_ohwr_regs_ch_2_sta_amp_iflag_r_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Thermal Limit Flag (TFLAG_R)' in reg: 'Channel 2 status register'
    rtmlamp_ohwr_regs_ch_2_sta_amp_tflag_r_i : in    std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 2 status register'
    rtmlamp_ohwr_regs_ch_2_sta_reserved_i : in    std_logic_vector(27 downto 0);
    -- Port for BIT field: 'Amplifier Enable' in reg: 'Channel 2 control register'
    rtmlamp_ohwr_regs_ch_2_ctl_amp_en_o : out   std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 2 control register'
    rtmlamp_ohwr_regs_ch_2_ctl_reserved_o : out   std_logic_vector(30 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'DAC data' in reg: 'DAC channel 2 control register'
    rtmlamp_ohwr_regs_ch_2_dac_data_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) MONOSTABLE field: 'Write DAC data to external CI' in reg: 'DAC channel 2 control register'
    rtmlamp_ohwr_regs_ch_2_dac_wr_o : out   std_logic;
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'reserved' in reg: 'DAC channel 2 control register'
    rtmlamp_ohwr_regs_ch_2_dac_reserved_o : out   std_logic_vector(14 downto 0);
    -- Port for BIT field: 'Amplifier Left Current Limit Flag (IFLAG_L)' in reg: 'Channel 3 status register'
    rtmlamp_ohwr_regs_ch_3_sta_amp_iflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Left Thermal Limit Flag (TFLAG_L)' in reg: 'Channel 3 status register'
    rtmlamp_ohwr_regs_ch_3_sta_amp_tflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Current Limit Flag (IFLAG_R)' in reg: 'Channel 3 status register'
    rtmlamp_ohwr_regs_ch_3_sta_amp_iflag_r_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Thermal Limit Flag (TFLAG_R)' in reg: 'Channel 3 status register'
    rtmlamp_ohwr_regs_ch_3_sta_amp_tflag_r_i : in    std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 3 status register'
    rtmlamp_ohwr_regs_ch_3_sta_reserved_i : in    std_logic_vector(27 downto 0);
    -- Port for BIT field: 'Amplifier Enable' in reg: 'Channel 3 control register'
    rtmlamp_ohwr_regs_ch_3_ctl_amp_en_o : out   std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 3 control register'
    rtmlamp_ohwr_regs_ch_3_ctl_reserved_o : out   std_logic_vector(30 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'DAC data' in reg: 'DAC channel 3 control register'
    rtmlamp_ohwr_regs_ch_3_dac_data_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) MONOSTABLE field: 'Write DAC data to external CI' in reg: 'DAC channel 3 control register'
    rtmlamp_ohwr_regs_ch_3_dac_wr_o : out   std_logic;
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'reserved' in reg: 'DAC channel 3 control register'
    rtmlamp_ohwr_regs_ch_3_dac_reserved_o : out   std_logic_vector(14 downto 0);
    -- Port for BIT field: 'Amplifier Left Current Limit Flag (IFLAG_L)' in reg: 'Channel 4 status register'
    rtmlamp_ohwr_regs_ch_4_sta_amp_iflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Left Thermal Limit Flag (TFLAG_L)' in reg: 'Channel 4 status register'
    rtmlamp_ohwr_regs_ch_4_sta_amp_tflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Current Limit Flag (IFLAG_R)' in reg: 'Channel 4 status register'
    rtmlamp_ohwr_regs_ch_4_sta_amp_iflag_r_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Thermal Limit Flag (TFLAG_R)' in reg: 'Channel 4 status register'
    rtmlamp_ohwr_regs_ch_4_sta_amp_tflag_r_i : in    std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 4 status register'
    rtmlamp_ohwr_regs_ch_4_sta_reserved_i : in    std_logic_vector(27 downto 0);
    -- Port for BIT field: 'Amplifier Enable' in reg: 'Channel 4 control register'
    rtmlamp_ohwr_regs_ch_4_ctl_amp_en_o : out   std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 4 control register'
    rtmlamp_ohwr_regs_ch_4_ctl_reserved_o : out   std_logic_vector(30 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'DAC data' in reg: 'DAC channel 4 control register'
    rtmlamp_ohwr_regs_ch_4_dac_data_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) MONOSTABLE field: 'Write DAC data to external CI' in reg: 'DAC channel 4 control register'
    rtmlamp_ohwr_regs_ch_4_dac_wr_o : out   std_logic;
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'reserved' in reg: 'DAC channel 4 control register'
    rtmlamp_ohwr_regs_ch_4_dac_reserved_o : out   std_logic_vector(14 downto 0);
    -- Port for BIT field: 'Amplifier Left Current Limit Flag (IFLAG_L)' in reg: 'Channel 5 status register'
    rtmlamp_ohwr_regs_ch_5_sta_amp_iflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Left Thermal Limit Flag (TFLAG_L)' in reg: 'Channel 5 status register'
    rtmlamp_ohwr_regs_ch_5_sta_amp_tflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Current Limit Flag (IFLAG_R)' in reg: 'Channel 5 status register'
    rtmlamp_ohwr_regs_ch_5_sta_amp_iflag_r_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Thermal Limit Flag (TFLAG_R)' in reg: 'Channel 5 status register'
    rtmlamp_ohwr_regs_ch_5_sta_amp_tflag_r_i : in    std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 5 status register'
    rtmlamp_ohwr_regs_ch_5_sta_reserved_i : in    std_logic_vector(27 downto 0);
    -- Port for BIT field: 'Amplifier Enable' in reg: 'Channel 5 control register'
    rtmlamp_ohwr_regs_ch_5_ctl_amp_en_o : out   std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 5 control register'
    rtmlamp_ohwr_regs_ch_5_ctl_reserved_o : out   std_logic_vector(30 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'DAC data' in reg: 'DAC channel 5 control register'
    rtmlamp_ohwr_regs_ch_5_dac_data_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) MONOSTABLE field: 'Write DAC data to external CI' in reg: 'DAC channel 5 control register'
    rtmlamp_ohwr_regs_ch_5_dac_wr_o : out   std_logic;
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'reserved' in reg: 'DAC channel 5 control register'
    rtmlamp_ohwr_regs_ch_5_dac_reserved_o : out   std_logic_vector(14 downto 0);
    -- Port for BIT field: 'Amplifier Left Current Limit Flag (IFLAG_L)' in reg: 'Channel 6 status register'
    rtmlamp_ohwr_regs_ch_6_sta_amp_iflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Left Thermal Limit Flag (TFLAG_L)' in reg: 'Channel 6 status register'
    rtmlamp_ohwr_regs_ch_6_sta_amp_tflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Current Limit Flag (IFLAG_R)' in reg: 'Channel 6 status register'
    rtmlamp_ohwr_regs_ch_6_sta_amp_iflag_r_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Thermal Limit Flag (TFLAG_R)' in reg: 'Channel 6 status register'
    rtmlamp_ohwr_regs_ch_6_sta_amp_tflag_r_i : in    std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 6 status register'
    rtmlamp_ohwr_regs_ch_6_sta_reserved_i : in    std_logic_vector(27 downto 0);
    -- Port for BIT field: 'Amplifier Enable' in reg: 'Channel 6 control register'
    rtmlamp_ohwr_regs_ch_6_ctl_amp_en_o : out   std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 6 control register'
    rtmlamp_ohwr_regs_ch_6_ctl_reserved_o : out   std_logic_vector(30 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'DAC data' in reg: 'DAC channel 6 control register'
    rtmlamp_ohwr_regs_ch_6_dac_data_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) MONOSTABLE field: 'Write DAC data to external CI' in reg: 'DAC channel 6 control register'
    rtmlamp_ohwr_regs_ch_6_dac_wr_o : out   std_logic;
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'reserved' in reg: 'DAC channel 6 control register'
    rtmlamp_ohwr_regs_ch_6_dac_reserved_o : out   std_logic_vector(14 downto 0);
    -- Port for BIT field: 'Amplifier Left Current Limit Flag (IFLAG_L)' in reg: 'Channel 7 status register'
    rtmlamp_ohwr_regs_ch_7_sta_amp_iflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Left Thermal Limit Flag (TFLAG_L)' in reg: 'Channel 7 status register'
    rtmlamp_ohwr_regs_ch_7_sta_amp_tflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Current Limit Flag (IFLAG_R)' in reg: 'Channel 7 status register'
    rtmlamp_ohwr_regs_ch_7_sta_amp_iflag_r_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Thermal Limit Flag (TFLAG_R)' in reg: 'Channel 7 status register'
    rtmlamp_ohwr_regs_ch_7_sta_amp_tflag_r_i : in    std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 7 status register'
    rtmlamp_ohwr_regs_ch_7_sta_reserved_i : in    std_logic_vector(27 downto 0);
    -- Port for BIT field: 'Amplifier Enable' in reg: 'Channel 7 control register'
    rtmlamp_ohwr_regs_ch_7_ctl_amp_en_o : out   std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 7 control register'
    rtmlamp_ohwr_regs_ch_7_ctl_reserved_o : out   std_logic_vector(30 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'DAC data' in reg: 'DAC channel 7 control register'
    rtmlamp_ohwr_regs_ch_7_dac_data_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) MONOSTABLE field: 'Write DAC data to external CI' in reg: 'DAC channel 7 control register'
    rtmlamp_ohwr_regs_ch_7_dac_wr_o : out   std_logic;
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'reserved' in reg: 'DAC channel 7 control register'
    rtmlamp_ohwr_regs_ch_7_dac_reserved_o : out   std_logic_vector(14 downto 0);
    -- Port for BIT field: 'Amplifier Left Current Limit Flag (IFLAG_L)' in reg: 'Channel 8 status register'
    rtmlamp_ohwr_regs_ch_8_sta_amp_iflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Left Thermal Limit Flag (TFLAG_L)' in reg: 'Channel 8 status register'
    rtmlamp_ohwr_regs_ch_8_sta_amp_tflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Current Limit Flag (IFLAG_R)' in reg: 'Channel 8 status register'
    rtmlamp_ohwr_regs_ch_8_sta_amp_iflag_r_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Thermal Limit Flag (TFLAG_R)' in reg: 'Channel 8 status register'
    rtmlamp_ohwr_regs_ch_8_sta_amp_tflag_r_i : in    std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 8 status register'
    rtmlamp_ohwr_regs_ch_8_sta_reserved_i : in    std_logic_vector(27 downto 0);
    -- Port for BIT field: 'Amplifier Enable' in reg: 'Channel 8 control register'
    rtmlamp_ohwr_regs_ch_8_ctl_amp_en_o : out   std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 8 control register'
    rtmlamp_ohwr_regs_ch_8_ctl_reserved_o : out   std_logic_vector(30 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'DAC data' in reg: 'DAC channel 8 control register'
    rtmlamp_ohwr_regs_ch_8_dac_data_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) MONOSTABLE field: 'Write DAC data to external CI' in reg: 'DAC channel 8 control register'
    rtmlamp_ohwr_regs_ch_8_dac_wr_o : out   std_logic;
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'reserved' in reg: 'DAC channel 8 control register'
    rtmlamp_ohwr_regs_ch_8_dac_reserved_o : out   std_logic_vector(14 downto 0);
    -- Port for BIT field: 'Amplifier Left Current Limit Flag (IFLAG_L)' in reg: 'Channel 9 status register'
    rtmlamp_ohwr_regs_ch_9_sta_amp_iflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Left Thermal Limit Flag (TFLAG_L)' in reg: 'Channel 9 status register'
    rtmlamp_ohwr_regs_ch_9_sta_amp_tflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Current Limit Flag (IFLAG_R)' in reg: 'Channel 9 status register'
    rtmlamp_ohwr_regs_ch_9_sta_amp_iflag_r_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Thermal Limit Flag (TFLAG_R)' in reg: 'Channel 9 status register'
    rtmlamp_ohwr_regs_ch_9_sta_amp_tflag_r_i : in    std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 9 status register'
    rtmlamp_ohwr_regs_ch_9_sta_reserved_i : in    std_logic_vector(27 downto 0);
    -- Port for BIT field: 'Amplifier Enable' in reg: 'Channel 9 control register'
    rtmlamp_ohwr_regs_ch_9_ctl_amp_en_o : out   std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 9 control register'
    rtmlamp_ohwr_regs_ch_9_ctl_reserved_o : out   std_logic_vector(30 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'DAC data' in reg: 'DAC channel 9 control register'
    rtmlamp_ohwr_regs_ch_9_dac_data_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) MONOSTABLE field: 'Write DAC data to external CI' in reg: 'DAC channel 9 control register'
    rtmlamp_ohwr_regs_ch_9_dac_wr_o : out   std_logic;
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'reserved' in reg: 'DAC channel 9 control register'
    rtmlamp_ohwr_regs_ch_9_dac_reserved_o : out   std_logic_vector(14 downto 0);
    -- Port for BIT field: 'Amplifier Left Current Limit Flag (IFLAG_L)' in reg: 'Channel 10 status register'
    rtmlamp_ohwr_regs_ch_10_sta_amp_iflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Left Thermal Limit Flag (TFLAG_L)' in reg: 'Channel 10 status register'
    rtmlamp_ohwr_regs_ch_10_sta_amp_tflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Current Limit Flag (IFLAG_R)' in reg: 'Channel 10 status register'
    rtmlamp_ohwr_regs_ch_10_sta_amp_iflag_r_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Thermal Limit Flag (TFLAG_R)' in reg: 'Channel 10 status register'
    rtmlamp_ohwr_regs_ch_10_sta_amp_tflag_r_i : in    std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 10 status register'
    rtmlamp_ohwr_regs_ch_10_sta_reserved_i : in    std_logic_vector(27 downto 0);
    -- Port for BIT field: 'Amplifier Enable' in reg: 'Channel 10 control register'
    rtmlamp_ohwr_regs_ch_10_ctl_amp_en_o : out   std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 10 control register'
    rtmlamp_ohwr_regs_ch_10_ctl_reserved_o : out   std_logic_vector(30 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'DAC data' in reg: 'DAC channel 10 control register'
    rtmlamp_ohwr_regs_ch_10_dac_data_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) MONOSTABLE field: 'Write DAC data to external CI' in reg: 'DAC channel 10 control register'
    rtmlamp_ohwr_regs_ch_10_dac_wr_o : out   std_logic;
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'reserved' in reg: 'DAC channel 10 control register'
    rtmlamp_ohwr_regs_ch_10_dac_reserved_o : out   std_logic_vector(14 downto 0);
    -- Port for BIT field: 'Amplifier Left Current Limit Flag (IFLAG_L)' in reg: 'Channel 11 status register'
    rtmlamp_ohwr_regs_ch_11_sta_amp_iflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Left Thermal Limit Flag (TFLAG_L)' in reg: 'Channel 11 status register'
    rtmlamp_ohwr_regs_ch_11_sta_amp_tflag_l_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Current Limit Flag (IFLAG_R)' in reg: 'Channel 11 status register'
    rtmlamp_ohwr_regs_ch_11_sta_amp_iflag_r_i : in    std_logic;
    -- Port for BIT field: 'Amplifier Right Thermal Limit Flag (TFLAG_R)' in reg: 'Channel 11 status register'
    rtmlamp_ohwr_regs_ch_11_sta_amp_tflag_r_i : in    std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 11 status register'
    rtmlamp_ohwr_regs_ch_11_sta_reserved_i : in    std_logic_vector(27 downto 0);
    -- Port for BIT field: 'Amplifier Enable' in reg: 'Channel 11 control register'
    rtmlamp_ohwr_regs_ch_11_ctl_amp_en_o : out   std_logic;
    -- Port for std_logic_vector field: 'reserved' in reg: 'Channel 11 control register'
    rtmlamp_ohwr_regs_ch_11_ctl_reserved_o : out   std_logic_vector(30 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'DAC data' in reg: 'DAC channel 11 control register'
    rtmlamp_ohwr_regs_ch_11_dac_data_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: dac_master_clk_i) MONOSTABLE field: 'Write DAC data to external CI' in reg: 'DAC channel 11 control register'
    rtmlamp_ohwr_regs_ch_11_dac_wr_o : out   std_logic;
    -- Port for asynchronous (clock: dac_master_clk_i) std_logic_vector field: 'reserved' in reg: 'DAC channel 11 control register'
    rtmlamp_ohwr_regs_ch_11_dac_reserved_o : out   std_logic_vector(14 downto 0)
  );
end wb_rtmlamp_ohwr_regs;

architecture syn of wb_rtmlamp_ohwr_regs is

  signal rtmlamp_ohwr_regs_sta_reserved_int : std_logic_vector(31 downto 0);
  signal rtmlamp_ohwr_regs_sta_reserved_lwb : std_logic;
  signal rtmlamp_ohwr_regs_sta_reserved_lwb_delay : std_logic;
  signal rtmlamp_ohwr_regs_sta_reserved_lwb_in_progress : std_logic;
  signal rtmlamp_ohwr_regs_sta_reserved_lwb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_sta_reserved_lwb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_sta_reserved_lwb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ctl_dac_data_from_wb_int : std_logic;
  signal rtmlamp_ohwr_regs_ctl_dac_data_from_wb_sync0 : std_logic;
  signal rtmlamp_ohwr_regs_ctl_dac_data_from_wb_sync1 : std_logic;
  signal rtmlamp_ohwr_regs_ctl_reserved_int : std_logic_vector(30 downto 0);
  signal rtmlamp_ohwr_regs_ctl_reserved_lwb : std_logic;
  signal rtmlamp_ohwr_regs_ctl_reserved_lwb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ctl_reserved_lwb_in_progress : std_logic;
  signal rtmlamp_ohwr_regs_ctl_reserved_lwb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ctl_reserved_lwb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ctl_reserved_lwb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_ctl_amp_en_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_ctl_reserved_int : std_logic_vector(30 downto 0);
  signal rtmlamp_ohwr_regs_ch_0_dac_data_int : std_logic_vector(15 downto 0);
  signal rtmlamp_ohwr_regs_ch_0_dac_data_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_dac_data_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_dac_data_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_dac_data_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_dac_data_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_dac_wr_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_dac_wr_int_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_dac_wr_sync0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_dac_wr_sync1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_dac_wr_sync2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_dac_reserved_int : std_logic_vector(14 downto 0);
  signal rtmlamp_ohwr_regs_ch_0_dac_reserved_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_ctl_amp_en_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_ctl_reserved_int : std_logic_vector(30 downto 0);
  signal rtmlamp_ohwr_regs_ch_1_dac_data_int : std_logic_vector(15 downto 0);
  signal rtmlamp_ohwr_regs_ch_1_dac_data_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_dac_data_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_dac_data_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_dac_data_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_dac_data_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_dac_wr_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_dac_wr_int_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_dac_wr_sync0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_dac_wr_sync1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_dac_wr_sync2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_dac_reserved_int : std_logic_vector(14 downto 0);
  signal rtmlamp_ohwr_regs_ch_1_dac_reserved_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_ctl_amp_en_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_ctl_reserved_int : std_logic_vector(30 downto 0);
  signal rtmlamp_ohwr_regs_ch_2_dac_data_int : std_logic_vector(15 downto 0);
  signal rtmlamp_ohwr_regs_ch_2_dac_data_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_dac_data_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_dac_data_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_dac_data_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_dac_data_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_dac_wr_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_dac_wr_int_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_dac_wr_sync0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_dac_wr_sync1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_dac_wr_sync2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_dac_reserved_int : std_logic_vector(14 downto 0);
  signal rtmlamp_ohwr_regs_ch_2_dac_reserved_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_ctl_amp_en_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_ctl_reserved_int : std_logic_vector(30 downto 0);
  signal rtmlamp_ohwr_regs_ch_3_dac_data_int : std_logic_vector(15 downto 0);
  signal rtmlamp_ohwr_regs_ch_3_dac_data_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_dac_data_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_dac_data_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_dac_data_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_dac_data_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_dac_wr_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_dac_wr_int_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_dac_wr_sync0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_dac_wr_sync1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_dac_wr_sync2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_dac_reserved_int : std_logic_vector(14 downto 0);
  signal rtmlamp_ohwr_regs_ch_3_dac_reserved_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_ctl_amp_en_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_ctl_reserved_int : std_logic_vector(30 downto 0);
  signal rtmlamp_ohwr_regs_ch_4_dac_data_int : std_logic_vector(15 downto 0);
  signal rtmlamp_ohwr_regs_ch_4_dac_data_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_dac_data_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_dac_data_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_dac_data_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_dac_data_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_dac_wr_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_dac_wr_int_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_dac_wr_sync0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_dac_wr_sync1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_dac_wr_sync2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_dac_reserved_int : std_logic_vector(14 downto 0);
  signal rtmlamp_ohwr_regs_ch_4_dac_reserved_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_ctl_amp_en_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_ctl_reserved_int : std_logic_vector(30 downto 0);
  signal rtmlamp_ohwr_regs_ch_5_dac_data_int : std_logic_vector(15 downto 0);
  signal rtmlamp_ohwr_regs_ch_5_dac_data_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_dac_data_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_dac_data_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_dac_data_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_dac_data_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_dac_wr_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_dac_wr_int_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_dac_wr_sync0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_dac_wr_sync1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_dac_wr_sync2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_dac_reserved_int : std_logic_vector(14 downto 0);
  signal rtmlamp_ohwr_regs_ch_5_dac_reserved_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_ctl_amp_en_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_ctl_reserved_int : std_logic_vector(30 downto 0);
  signal rtmlamp_ohwr_regs_ch_6_dac_data_int : std_logic_vector(15 downto 0);
  signal rtmlamp_ohwr_regs_ch_6_dac_data_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_dac_data_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_dac_data_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_dac_data_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_dac_data_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_dac_wr_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_dac_wr_int_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_dac_wr_sync0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_dac_wr_sync1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_dac_wr_sync2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_dac_reserved_int : std_logic_vector(14 downto 0);
  signal rtmlamp_ohwr_regs_ch_6_dac_reserved_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_ctl_amp_en_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_ctl_reserved_int : std_logic_vector(30 downto 0);
  signal rtmlamp_ohwr_regs_ch_7_dac_data_int : std_logic_vector(15 downto 0);
  signal rtmlamp_ohwr_regs_ch_7_dac_data_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_dac_data_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_dac_data_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_dac_data_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_dac_data_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_dac_wr_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_dac_wr_int_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_dac_wr_sync0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_dac_wr_sync1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_dac_wr_sync2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_dac_reserved_int : std_logic_vector(14 downto 0);
  signal rtmlamp_ohwr_regs_ch_7_dac_reserved_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_ctl_amp_en_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_ctl_reserved_int : std_logic_vector(30 downto 0);
  signal rtmlamp_ohwr_regs_ch_8_dac_data_int : std_logic_vector(15 downto 0);
  signal rtmlamp_ohwr_regs_ch_8_dac_data_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_dac_data_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_dac_data_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_dac_data_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_dac_data_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_dac_wr_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_dac_wr_int_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_dac_wr_sync0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_dac_wr_sync1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_dac_wr_sync2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_dac_reserved_int : std_logic_vector(14 downto 0);
  signal rtmlamp_ohwr_regs_ch_8_dac_reserved_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_ctl_amp_en_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_ctl_reserved_int : std_logic_vector(30 downto 0);
  signal rtmlamp_ohwr_regs_ch_9_dac_data_int : std_logic_vector(15 downto 0);
  signal rtmlamp_ohwr_regs_ch_9_dac_data_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_dac_data_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_dac_data_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_dac_data_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_dac_data_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_dac_wr_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_dac_wr_int_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_dac_wr_sync0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_dac_wr_sync1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_dac_wr_sync2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_dac_reserved_int : std_logic_vector(14 downto 0);
  signal rtmlamp_ohwr_regs_ch_9_dac_reserved_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_ctl_amp_en_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_ctl_reserved_int : std_logic_vector(30 downto 0);
  signal rtmlamp_ohwr_regs_ch_10_dac_data_int : std_logic_vector(15 downto 0);
  signal rtmlamp_ohwr_regs_ch_10_dac_data_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_dac_data_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_dac_data_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_dac_data_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_dac_data_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_dac_wr_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_dac_wr_int_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_dac_wr_sync0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_dac_wr_sync1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_dac_wr_sync2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_dac_reserved_int : std_logic_vector(14 downto 0);
  signal rtmlamp_ohwr_regs_ch_10_dac_reserved_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_ctl_amp_en_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_ctl_reserved_int : std_logic_vector(30 downto 0);
  signal rtmlamp_ohwr_regs_ch_11_dac_data_int : std_logic_vector(15 downto 0);
  signal rtmlamp_ohwr_regs_ch_11_dac_data_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_dac_data_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_dac_data_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_dac_data_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_dac_data_swb_s2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_dac_wr_int : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_dac_wr_int_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_dac_wr_sync0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_dac_wr_sync1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_dac_wr_sync2 : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_dac_reserved_int : std_logic_vector(14 downto 0);
  signal rtmlamp_ohwr_regs_ch_11_dac_reserved_swb : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_delay : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_s0 : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_s1 : std_logic;
  signal rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_s2 : std_logic;
  signal ack_sreg                       : std_logic_vector(9 downto 0);
  signal rddata_reg                     : std_logic_vector(31 downto 0);
  signal wrdata_reg                     : std_logic_vector(31 downto 0);
  signal bwsel_reg                      : std_logic_vector(3 downto 0);
  signal rwaddr_reg                     : std_logic_vector(6 downto 0);
  signal ack_in_progress                : std_logic;
  signal wr_int                         : std_logic;
  signal rd_int                         : std_logic;
  signal allones                        : std_logic_vector(31 downto 0);
  signal allzeros                       : std_logic_vector(31 downto 0);

begin
  -- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
  -- 
  -- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      rtmlamp_ohwr_regs_sta_reserved_lwb <= '0';
      rtmlamp_ohwr_regs_sta_reserved_lwb_delay <= '0';
      rtmlamp_ohwr_regs_sta_reserved_lwb_in_progress <= '0';
      rtmlamp_ohwr_regs_ctl_dac_data_from_wb_int <= '0';
      rtmlamp_ohwr_regs_ctl_reserved_lwb <= '0';
      rtmlamp_ohwr_regs_ctl_reserved_lwb_delay <= '0';
      rtmlamp_ohwr_regs_ctl_reserved_lwb_in_progress <= '0';
      rtmlamp_ohwr_regs_ch_0_ctl_amp_en_int <= '0';
      rtmlamp_ohwr_regs_ch_0_ctl_reserved_int <= "0000000000000000000000000000000";
      rtmlamp_ohwr_regs_ch_0_dac_data_int <= "0000000000000000";
      rtmlamp_ohwr_regs_ch_0_dac_data_swb <= '0';
      rtmlamp_ohwr_regs_ch_0_dac_data_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_0_dac_wr_int <= '0';
      rtmlamp_ohwr_regs_ch_0_dac_wr_int_delay <= '0';
      rtmlamp_ohwr_regs_ch_0_dac_reserved_int <= "000000000000000";
      rtmlamp_ohwr_regs_ch_0_dac_reserved_swb <= '0';
      rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_1_ctl_amp_en_int <= '0';
      rtmlamp_ohwr_regs_ch_1_ctl_reserved_int <= "0000000000000000000000000000000";
      rtmlamp_ohwr_regs_ch_1_dac_data_int <= "0000000000000000";
      rtmlamp_ohwr_regs_ch_1_dac_data_swb <= '0';
      rtmlamp_ohwr_regs_ch_1_dac_data_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_1_dac_wr_int <= '0';
      rtmlamp_ohwr_regs_ch_1_dac_wr_int_delay <= '0';
      rtmlamp_ohwr_regs_ch_1_dac_reserved_int <= "000000000000000";
      rtmlamp_ohwr_regs_ch_1_dac_reserved_swb <= '0';
      rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_2_ctl_amp_en_int <= '0';
      rtmlamp_ohwr_regs_ch_2_ctl_reserved_int <= "0000000000000000000000000000000";
      rtmlamp_ohwr_regs_ch_2_dac_data_int <= "0000000000000000";
      rtmlamp_ohwr_regs_ch_2_dac_data_swb <= '0';
      rtmlamp_ohwr_regs_ch_2_dac_data_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_2_dac_wr_int <= '0';
      rtmlamp_ohwr_regs_ch_2_dac_wr_int_delay <= '0';
      rtmlamp_ohwr_regs_ch_2_dac_reserved_int <= "000000000000000";
      rtmlamp_ohwr_regs_ch_2_dac_reserved_swb <= '0';
      rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_3_ctl_amp_en_int <= '0';
      rtmlamp_ohwr_regs_ch_3_ctl_reserved_int <= "0000000000000000000000000000000";
      rtmlamp_ohwr_regs_ch_3_dac_data_int <= "0000000000000000";
      rtmlamp_ohwr_regs_ch_3_dac_data_swb <= '0';
      rtmlamp_ohwr_regs_ch_3_dac_data_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_3_dac_wr_int <= '0';
      rtmlamp_ohwr_regs_ch_3_dac_wr_int_delay <= '0';
      rtmlamp_ohwr_regs_ch_3_dac_reserved_int <= "000000000000000";
      rtmlamp_ohwr_regs_ch_3_dac_reserved_swb <= '0';
      rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_4_ctl_amp_en_int <= '0';
      rtmlamp_ohwr_regs_ch_4_ctl_reserved_int <= "0000000000000000000000000000000";
      rtmlamp_ohwr_regs_ch_4_dac_data_int <= "0000000000000000";
      rtmlamp_ohwr_regs_ch_4_dac_data_swb <= '0';
      rtmlamp_ohwr_regs_ch_4_dac_data_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_4_dac_wr_int <= '0';
      rtmlamp_ohwr_regs_ch_4_dac_wr_int_delay <= '0';
      rtmlamp_ohwr_regs_ch_4_dac_reserved_int <= "000000000000000";
      rtmlamp_ohwr_regs_ch_4_dac_reserved_swb <= '0';
      rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_5_ctl_amp_en_int <= '0';
      rtmlamp_ohwr_regs_ch_5_ctl_reserved_int <= "0000000000000000000000000000000";
      rtmlamp_ohwr_regs_ch_5_dac_data_int <= "0000000000000000";
      rtmlamp_ohwr_regs_ch_5_dac_data_swb <= '0';
      rtmlamp_ohwr_regs_ch_5_dac_data_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_5_dac_wr_int <= '0';
      rtmlamp_ohwr_regs_ch_5_dac_wr_int_delay <= '0';
      rtmlamp_ohwr_regs_ch_5_dac_reserved_int <= "000000000000000";
      rtmlamp_ohwr_regs_ch_5_dac_reserved_swb <= '0';
      rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_6_ctl_amp_en_int <= '0';
      rtmlamp_ohwr_regs_ch_6_ctl_reserved_int <= "0000000000000000000000000000000";
      rtmlamp_ohwr_regs_ch_6_dac_data_int <= "0000000000000000";
      rtmlamp_ohwr_regs_ch_6_dac_data_swb <= '0';
      rtmlamp_ohwr_regs_ch_6_dac_data_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_6_dac_wr_int <= '0';
      rtmlamp_ohwr_regs_ch_6_dac_wr_int_delay <= '0';
      rtmlamp_ohwr_regs_ch_6_dac_reserved_int <= "000000000000000";
      rtmlamp_ohwr_regs_ch_6_dac_reserved_swb <= '0';
      rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_7_ctl_amp_en_int <= '0';
      rtmlamp_ohwr_regs_ch_7_ctl_reserved_int <= "0000000000000000000000000000000";
      rtmlamp_ohwr_regs_ch_7_dac_data_int <= "0000000000000000";
      rtmlamp_ohwr_regs_ch_7_dac_data_swb <= '0';
      rtmlamp_ohwr_regs_ch_7_dac_data_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_7_dac_wr_int <= '0';
      rtmlamp_ohwr_regs_ch_7_dac_wr_int_delay <= '0';
      rtmlamp_ohwr_regs_ch_7_dac_reserved_int <= "000000000000000";
      rtmlamp_ohwr_regs_ch_7_dac_reserved_swb <= '0';
      rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_8_ctl_amp_en_int <= '0';
      rtmlamp_ohwr_regs_ch_8_ctl_reserved_int <= "0000000000000000000000000000000";
      rtmlamp_ohwr_regs_ch_8_dac_data_int <= "0000000000000000";
      rtmlamp_ohwr_regs_ch_8_dac_data_swb <= '0';
      rtmlamp_ohwr_regs_ch_8_dac_data_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_8_dac_wr_int <= '0';
      rtmlamp_ohwr_regs_ch_8_dac_wr_int_delay <= '0';
      rtmlamp_ohwr_regs_ch_8_dac_reserved_int <= "000000000000000";
      rtmlamp_ohwr_regs_ch_8_dac_reserved_swb <= '0';
      rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_9_ctl_amp_en_int <= '0';
      rtmlamp_ohwr_regs_ch_9_ctl_reserved_int <= "0000000000000000000000000000000";
      rtmlamp_ohwr_regs_ch_9_dac_data_int <= "0000000000000000";
      rtmlamp_ohwr_regs_ch_9_dac_data_swb <= '0';
      rtmlamp_ohwr_regs_ch_9_dac_data_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_9_dac_wr_int <= '0';
      rtmlamp_ohwr_regs_ch_9_dac_wr_int_delay <= '0';
      rtmlamp_ohwr_regs_ch_9_dac_reserved_int <= "000000000000000";
      rtmlamp_ohwr_regs_ch_9_dac_reserved_swb <= '0';
      rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_10_ctl_amp_en_int <= '0';
      rtmlamp_ohwr_regs_ch_10_ctl_reserved_int <= "0000000000000000000000000000000";
      rtmlamp_ohwr_regs_ch_10_dac_data_int <= "0000000000000000";
      rtmlamp_ohwr_regs_ch_10_dac_data_swb <= '0';
      rtmlamp_ohwr_regs_ch_10_dac_data_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_10_dac_wr_int <= '0';
      rtmlamp_ohwr_regs_ch_10_dac_wr_int_delay <= '0';
      rtmlamp_ohwr_regs_ch_10_dac_reserved_int <= "000000000000000";
      rtmlamp_ohwr_regs_ch_10_dac_reserved_swb <= '0';
      rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_11_ctl_amp_en_int <= '0';
      rtmlamp_ohwr_regs_ch_11_ctl_reserved_int <= "0000000000000000000000000000000";
      rtmlamp_ohwr_regs_ch_11_dac_data_int <= "0000000000000000";
      rtmlamp_ohwr_regs_ch_11_dac_data_swb <= '0';
      rtmlamp_ohwr_regs_ch_11_dac_data_swb_delay <= '0';
      rtmlamp_ohwr_regs_ch_11_dac_wr_int <= '0';
      rtmlamp_ohwr_regs_ch_11_dac_wr_int_delay <= '0';
      rtmlamp_ohwr_regs_ch_11_dac_reserved_int <= "000000000000000";
      rtmlamp_ohwr_regs_ch_11_dac_reserved_swb <= '0';
      rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_delay <= '0';
    elsif rising_edge(clk_sys_i) then
      -- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          ack_in_progress <= '0';
        else
          rtmlamp_ohwr_regs_sta_reserved_lwb <= rtmlamp_ohwr_regs_sta_reserved_lwb_delay;
          rtmlamp_ohwr_regs_sta_reserved_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (rtmlamp_ohwr_regs_sta_reserved_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= rtmlamp_ohwr_regs_sta_reserved_int;
            rtmlamp_ohwr_regs_sta_reserved_lwb_in_progress <= '0';
          end if;
          rtmlamp_ohwr_regs_ctl_reserved_lwb <= rtmlamp_ohwr_regs_ctl_reserved_lwb_delay;
          rtmlamp_ohwr_regs_ctl_reserved_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (rtmlamp_ohwr_regs_ctl_reserved_lwb_in_progress = '1')) then
            rddata_reg(31 downto 1) <= rtmlamp_ohwr_regs_ctl_reserved_int;
            rtmlamp_ohwr_regs_ctl_reserved_lwb_in_progress <= '0';
          end if;
          rtmlamp_ohwr_regs_ch_0_dac_data_swb <= rtmlamp_ohwr_regs_ch_0_dac_data_swb_delay;
          rtmlamp_ohwr_regs_ch_0_dac_data_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_0_dac_wr_int <= rtmlamp_ohwr_regs_ch_0_dac_wr_int_delay;
          rtmlamp_ohwr_regs_ch_0_dac_wr_int_delay <= '0';
          rtmlamp_ohwr_regs_ch_0_dac_reserved_swb <= rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_delay;
          rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_1_dac_data_swb <= rtmlamp_ohwr_regs_ch_1_dac_data_swb_delay;
          rtmlamp_ohwr_regs_ch_1_dac_data_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_1_dac_wr_int <= rtmlamp_ohwr_regs_ch_1_dac_wr_int_delay;
          rtmlamp_ohwr_regs_ch_1_dac_wr_int_delay <= '0';
          rtmlamp_ohwr_regs_ch_1_dac_reserved_swb <= rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_delay;
          rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_2_dac_data_swb <= rtmlamp_ohwr_regs_ch_2_dac_data_swb_delay;
          rtmlamp_ohwr_regs_ch_2_dac_data_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_2_dac_wr_int <= rtmlamp_ohwr_regs_ch_2_dac_wr_int_delay;
          rtmlamp_ohwr_regs_ch_2_dac_wr_int_delay <= '0';
          rtmlamp_ohwr_regs_ch_2_dac_reserved_swb <= rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_delay;
          rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_3_dac_data_swb <= rtmlamp_ohwr_regs_ch_3_dac_data_swb_delay;
          rtmlamp_ohwr_regs_ch_3_dac_data_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_3_dac_wr_int <= rtmlamp_ohwr_regs_ch_3_dac_wr_int_delay;
          rtmlamp_ohwr_regs_ch_3_dac_wr_int_delay <= '0';
          rtmlamp_ohwr_regs_ch_3_dac_reserved_swb <= rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_delay;
          rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_4_dac_data_swb <= rtmlamp_ohwr_regs_ch_4_dac_data_swb_delay;
          rtmlamp_ohwr_regs_ch_4_dac_data_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_4_dac_wr_int <= rtmlamp_ohwr_regs_ch_4_dac_wr_int_delay;
          rtmlamp_ohwr_regs_ch_4_dac_wr_int_delay <= '0';
          rtmlamp_ohwr_regs_ch_4_dac_reserved_swb <= rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_delay;
          rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_5_dac_data_swb <= rtmlamp_ohwr_regs_ch_5_dac_data_swb_delay;
          rtmlamp_ohwr_regs_ch_5_dac_data_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_5_dac_wr_int <= rtmlamp_ohwr_regs_ch_5_dac_wr_int_delay;
          rtmlamp_ohwr_regs_ch_5_dac_wr_int_delay <= '0';
          rtmlamp_ohwr_regs_ch_5_dac_reserved_swb <= rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_delay;
          rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_6_dac_data_swb <= rtmlamp_ohwr_regs_ch_6_dac_data_swb_delay;
          rtmlamp_ohwr_regs_ch_6_dac_data_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_6_dac_wr_int <= rtmlamp_ohwr_regs_ch_6_dac_wr_int_delay;
          rtmlamp_ohwr_regs_ch_6_dac_wr_int_delay <= '0';
          rtmlamp_ohwr_regs_ch_6_dac_reserved_swb <= rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_delay;
          rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_7_dac_data_swb <= rtmlamp_ohwr_regs_ch_7_dac_data_swb_delay;
          rtmlamp_ohwr_regs_ch_7_dac_data_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_7_dac_wr_int <= rtmlamp_ohwr_regs_ch_7_dac_wr_int_delay;
          rtmlamp_ohwr_regs_ch_7_dac_wr_int_delay <= '0';
          rtmlamp_ohwr_regs_ch_7_dac_reserved_swb <= rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_delay;
          rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_8_dac_data_swb <= rtmlamp_ohwr_regs_ch_8_dac_data_swb_delay;
          rtmlamp_ohwr_regs_ch_8_dac_data_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_8_dac_wr_int <= rtmlamp_ohwr_regs_ch_8_dac_wr_int_delay;
          rtmlamp_ohwr_regs_ch_8_dac_wr_int_delay <= '0';
          rtmlamp_ohwr_regs_ch_8_dac_reserved_swb <= rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_delay;
          rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_9_dac_data_swb <= rtmlamp_ohwr_regs_ch_9_dac_data_swb_delay;
          rtmlamp_ohwr_regs_ch_9_dac_data_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_9_dac_wr_int <= rtmlamp_ohwr_regs_ch_9_dac_wr_int_delay;
          rtmlamp_ohwr_regs_ch_9_dac_wr_int_delay <= '0';
          rtmlamp_ohwr_regs_ch_9_dac_reserved_swb <= rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_delay;
          rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_10_dac_data_swb <= rtmlamp_ohwr_regs_ch_10_dac_data_swb_delay;
          rtmlamp_ohwr_regs_ch_10_dac_data_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_10_dac_wr_int <= rtmlamp_ohwr_regs_ch_10_dac_wr_int_delay;
          rtmlamp_ohwr_regs_ch_10_dac_wr_int_delay <= '0';
          rtmlamp_ohwr_regs_ch_10_dac_reserved_swb <= rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_delay;
          rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_11_dac_data_swb <= rtmlamp_ohwr_regs_ch_11_dac_data_swb_delay;
          rtmlamp_ohwr_regs_ch_11_dac_data_swb_delay <= '0';
          rtmlamp_ohwr_regs_ch_11_dac_wr_int <= rtmlamp_ohwr_regs_ch_11_dac_wr_int_delay;
          rtmlamp_ohwr_regs_ch_11_dac_wr_int_delay <= '0';
          rtmlamp_ohwr_regs_ch_11_dac_reserved_swb <= rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_delay;
          rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_delay <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(6 downto 0) is
          when "0000000" =>
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              rtmlamp_ohwr_regs_sta_reserved_lwb <= '1';
              rtmlamp_ohwr_regs_sta_reserved_lwb_delay <= '1';
              rtmlamp_ohwr_regs_sta_reserved_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "0000001" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ctl_dac_data_from_wb_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ctl_dac_data_from_wb_int;
            if (wb_we_i = '0') then
              rtmlamp_ohwr_regs_ctl_reserved_lwb <= '1';
              rtmlamp_ohwr_regs_ctl_reserved_lwb_delay <= '1';
              rtmlamp_ohwr_regs_ctl_reserved_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "1000000" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_0_sta_amp_iflag_l_i;
            rddata_reg(1) <= rtmlamp_ohwr_regs_ch_0_sta_amp_tflag_l_i;
            rddata_reg(2) <= rtmlamp_ohwr_regs_ch_0_sta_amp_iflag_r_i;
            rddata_reg(3) <= rtmlamp_ohwr_regs_ch_0_sta_amp_tflag_r_i;
            rddata_reg(31 downto 4) <= rtmlamp_ohwr_regs_ch_0_sta_reserved_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1000001" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_0_ctl_amp_en_int <= wrdata_reg(0);
              rtmlamp_ohwr_regs_ch_0_ctl_reserved_int <= wrdata_reg(31 downto 1);
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_0_ctl_amp_en_int;
            rddata_reg(31 downto 1) <= rtmlamp_ohwr_regs_ch_0_ctl_reserved_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1000010" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_0_dac_data_int <= wrdata_reg(15 downto 0);
              rtmlamp_ohwr_regs_ch_0_dac_data_swb <= '1';
              rtmlamp_ohwr_regs_ch_0_dac_data_swb_delay <= '1';
              rtmlamp_ohwr_regs_ch_0_dac_wr_int <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_0_dac_wr_int_delay <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_0_dac_reserved_int <= wrdata_reg(31 downto 17);
              rtmlamp_ohwr_regs_ch_0_dac_reserved_swb <= '1';
              rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= rtmlamp_ohwr_regs_ch_0_dac_data_int;
            rddata_reg(16) <= '0';
            rddata_reg(31 downto 17) <= rtmlamp_ohwr_regs_ch_0_dac_reserved_int;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "1000011" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_1_sta_amp_iflag_l_i;
            rddata_reg(1) <= rtmlamp_ohwr_regs_ch_1_sta_amp_tflag_l_i;
            rddata_reg(2) <= rtmlamp_ohwr_regs_ch_1_sta_amp_iflag_r_i;
            rddata_reg(3) <= rtmlamp_ohwr_regs_ch_1_sta_amp_tflag_r_i;
            rddata_reg(31 downto 4) <= rtmlamp_ohwr_regs_ch_1_sta_reserved_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1000100" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_1_ctl_amp_en_int <= wrdata_reg(0);
              rtmlamp_ohwr_regs_ch_1_ctl_reserved_int <= wrdata_reg(31 downto 1);
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_1_ctl_amp_en_int;
            rddata_reg(31 downto 1) <= rtmlamp_ohwr_regs_ch_1_ctl_reserved_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1000101" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_1_dac_data_int <= wrdata_reg(15 downto 0);
              rtmlamp_ohwr_regs_ch_1_dac_data_swb <= '1';
              rtmlamp_ohwr_regs_ch_1_dac_data_swb_delay <= '1';
              rtmlamp_ohwr_regs_ch_1_dac_wr_int <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_1_dac_wr_int_delay <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_1_dac_reserved_int <= wrdata_reg(31 downto 17);
              rtmlamp_ohwr_regs_ch_1_dac_reserved_swb <= '1';
              rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= rtmlamp_ohwr_regs_ch_1_dac_data_int;
            rddata_reg(16) <= '0';
            rddata_reg(31 downto 17) <= rtmlamp_ohwr_regs_ch_1_dac_reserved_int;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "1000110" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_2_sta_amp_iflag_l_i;
            rddata_reg(1) <= rtmlamp_ohwr_regs_ch_2_sta_amp_tflag_l_i;
            rddata_reg(2) <= rtmlamp_ohwr_regs_ch_2_sta_amp_iflag_r_i;
            rddata_reg(3) <= rtmlamp_ohwr_regs_ch_2_sta_amp_tflag_r_i;
            rddata_reg(31 downto 4) <= rtmlamp_ohwr_regs_ch_2_sta_reserved_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1000111" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_2_ctl_amp_en_int <= wrdata_reg(0);
              rtmlamp_ohwr_regs_ch_2_ctl_reserved_int <= wrdata_reg(31 downto 1);
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_2_ctl_amp_en_int;
            rddata_reg(31 downto 1) <= rtmlamp_ohwr_regs_ch_2_ctl_reserved_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1001000" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_2_dac_data_int <= wrdata_reg(15 downto 0);
              rtmlamp_ohwr_regs_ch_2_dac_data_swb <= '1';
              rtmlamp_ohwr_regs_ch_2_dac_data_swb_delay <= '1';
              rtmlamp_ohwr_regs_ch_2_dac_wr_int <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_2_dac_wr_int_delay <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_2_dac_reserved_int <= wrdata_reg(31 downto 17);
              rtmlamp_ohwr_regs_ch_2_dac_reserved_swb <= '1';
              rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= rtmlamp_ohwr_regs_ch_2_dac_data_int;
            rddata_reg(16) <= '0';
            rddata_reg(31 downto 17) <= rtmlamp_ohwr_regs_ch_2_dac_reserved_int;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "1001001" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_3_sta_amp_iflag_l_i;
            rddata_reg(1) <= rtmlamp_ohwr_regs_ch_3_sta_amp_tflag_l_i;
            rddata_reg(2) <= rtmlamp_ohwr_regs_ch_3_sta_amp_iflag_r_i;
            rddata_reg(3) <= rtmlamp_ohwr_regs_ch_3_sta_amp_tflag_r_i;
            rddata_reg(31 downto 4) <= rtmlamp_ohwr_regs_ch_3_sta_reserved_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1001010" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_3_ctl_amp_en_int <= wrdata_reg(0);
              rtmlamp_ohwr_regs_ch_3_ctl_reserved_int <= wrdata_reg(31 downto 1);
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_3_ctl_amp_en_int;
            rddata_reg(31 downto 1) <= rtmlamp_ohwr_regs_ch_3_ctl_reserved_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1001011" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_3_dac_data_int <= wrdata_reg(15 downto 0);
              rtmlamp_ohwr_regs_ch_3_dac_data_swb <= '1';
              rtmlamp_ohwr_regs_ch_3_dac_data_swb_delay <= '1';
              rtmlamp_ohwr_regs_ch_3_dac_wr_int <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_3_dac_wr_int_delay <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_3_dac_reserved_int <= wrdata_reg(31 downto 17);
              rtmlamp_ohwr_regs_ch_3_dac_reserved_swb <= '1';
              rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= rtmlamp_ohwr_regs_ch_3_dac_data_int;
            rddata_reg(16) <= '0';
            rddata_reg(31 downto 17) <= rtmlamp_ohwr_regs_ch_3_dac_reserved_int;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "1001100" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_4_sta_amp_iflag_l_i;
            rddata_reg(1) <= rtmlamp_ohwr_regs_ch_4_sta_amp_tflag_l_i;
            rddata_reg(2) <= rtmlamp_ohwr_regs_ch_4_sta_amp_iflag_r_i;
            rddata_reg(3) <= rtmlamp_ohwr_regs_ch_4_sta_amp_tflag_r_i;
            rddata_reg(31 downto 4) <= rtmlamp_ohwr_regs_ch_4_sta_reserved_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1001101" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_4_ctl_amp_en_int <= wrdata_reg(0);
              rtmlamp_ohwr_regs_ch_4_ctl_reserved_int <= wrdata_reg(31 downto 1);
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_4_ctl_amp_en_int;
            rddata_reg(31 downto 1) <= rtmlamp_ohwr_regs_ch_4_ctl_reserved_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1001110" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_4_dac_data_int <= wrdata_reg(15 downto 0);
              rtmlamp_ohwr_regs_ch_4_dac_data_swb <= '1';
              rtmlamp_ohwr_regs_ch_4_dac_data_swb_delay <= '1';
              rtmlamp_ohwr_regs_ch_4_dac_wr_int <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_4_dac_wr_int_delay <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_4_dac_reserved_int <= wrdata_reg(31 downto 17);
              rtmlamp_ohwr_regs_ch_4_dac_reserved_swb <= '1';
              rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= rtmlamp_ohwr_regs_ch_4_dac_data_int;
            rddata_reg(16) <= '0';
            rddata_reg(31 downto 17) <= rtmlamp_ohwr_regs_ch_4_dac_reserved_int;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "1001111" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_5_sta_amp_iflag_l_i;
            rddata_reg(1) <= rtmlamp_ohwr_regs_ch_5_sta_amp_tflag_l_i;
            rddata_reg(2) <= rtmlamp_ohwr_regs_ch_5_sta_amp_iflag_r_i;
            rddata_reg(3) <= rtmlamp_ohwr_regs_ch_5_sta_amp_tflag_r_i;
            rddata_reg(31 downto 4) <= rtmlamp_ohwr_regs_ch_5_sta_reserved_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1010000" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_5_ctl_amp_en_int <= wrdata_reg(0);
              rtmlamp_ohwr_regs_ch_5_ctl_reserved_int <= wrdata_reg(31 downto 1);
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_5_ctl_amp_en_int;
            rddata_reg(31 downto 1) <= rtmlamp_ohwr_regs_ch_5_ctl_reserved_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1010001" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_5_dac_data_int <= wrdata_reg(15 downto 0);
              rtmlamp_ohwr_regs_ch_5_dac_data_swb <= '1';
              rtmlamp_ohwr_regs_ch_5_dac_data_swb_delay <= '1';
              rtmlamp_ohwr_regs_ch_5_dac_wr_int <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_5_dac_wr_int_delay <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_5_dac_reserved_int <= wrdata_reg(31 downto 17);
              rtmlamp_ohwr_regs_ch_5_dac_reserved_swb <= '1';
              rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= rtmlamp_ohwr_regs_ch_5_dac_data_int;
            rddata_reg(16) <= '0';
            rddata_reg(31 downto 17) <= rtmlamp_ohwr_regs_ch_5_dac_reserved_int;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "1010010" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_6_sta_amp_iflag_l_i;
            rddata_reg(1) <= rtmlamp_ohwr_regs_ch_6_sta_amp_tflag_l_i;
            rddata_reg(2) <= rtmlamp_ohwr_regs_ch_6_sta_amp_iflag_r_i;
            rddata_reg(3) <= rtmlamp_ohwr_regs_ch_6_sta_amp_tflag_r_i;
            rddata_reg(31 downto 4) <= rtmlamp_ohwr_regs_ch_6_sta_reserved_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1010011" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_6_ctl_amp_en_int <= wrdata_reg(0);
              rtmlamp_ohwr_regs_ch_6_ctl_reserved_int <= wrdata_reg(31 downto 1);
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_6_ctl_amp_en_int;
            rddata_reg(31 downto 1) <= rtmlamp_ohwr_regs_ch_6_ctl_reserved_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1010100" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_6_dac_data_int <= wrdata_reg(15 downto 0);
              rtmlamp_ohwr_regs_ch_6_dac_data_swb <= '1';
              rtmlamp_ohwr_regs_ch_6_dac_data_swb_delay <= '1';
              rtmlamp_ohwr_regs_ch_6_dac_wr_int <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_6_dac_wr_int_delay <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_6_dac_reserved_int <= wrdata_reg(31 downto 17);
              rtmlamp_ohwr_regs_ch_6_dac_reserved_swb <= '1';
              rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= rtmlamp_ohwr_regs_ch_6_dac_data_int;
            rddata_reg(16) <= '0';
            rddata_reg(31 downto 17) <= rtmlamp_ohwr_regs_ch_6_dac_reserved_int;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "1010101" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_7_sta_amp_iflag_l_i;
            rddata_reg(1) <= rtmlamp_ohwr_regs_ch_7_sta_amp_tflag_l_i;
            rddata_reg(2) <= rtmlamp_ohwr_regs_ch_7_sta_amp_iflag_r_i;
            rddata_reg(3) <= rtmlamp_ohwr_regs_ch_7_sta_amp_tflag_r_i;
            rddata_reg(31 downto 4) <= rtmlamp_ohwr_regs_ch_7_sta_reserved_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1010110" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_7_ctl_amp_en_int <= wrdata_reg(0);
              rtmlamp_ohwr_regs_ch_7_ctl_reserved_int <= wrdata_reg(31 downto 1);
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_7_ctl_amp_en_int;
            rddata_reg(31 downto 1) <= rtmlamp_ohwr_regs_ch_7_ctl_reserved_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1010111" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_7_dac_data_int <= wrdata_reg(15 downto 0);
              rtmlamp_ohwr_regs_ch_7_dac_data_swb <= '1';
              rtmlamp_ohwr_regs_ch_7_dac_data_swb_delay <= '1';
              rtmlamp_ohwr_regs_ch_7_dac_wr_int <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_7_dac_wr_int_delay <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_7_dac_reserved_int <= wrdata_reg(31 downto 17);
              rtmlamp_ohwr_regs_ch_7_dac_reserved_swb <= '1';
              rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= rtmlamp_ohwr_regs_ch_7_dac_data_int;
            rddata_reg(16) <= '0';
            rddata_reg(31 downto 17) <= rtmlamp_ohwr_regs_ch_7_dac_reserved_int;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "1011000" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_8_sta_amp_iflag_l_i;
            rddata_reg(1) <= rtmlamp_ohwr_regs_ch_8_sta_amp_tflag_l_i;
            rddata_reg(2) <= rtmlamp_ohwr_regs_ch_8_sta_amp_iflag_r_i;
            rddata_reg(3) <= rtmlamp_ohwr_regs_ch_8_sta_amp_tflag_r_i;
            rddata_reg(31 downto 4) <= rtmlamp_ohwr_regs_ch_8_sta_reserved_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1011001" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_8_ctl_amp_en_int <= wrdata_reg(0);
              rtmlamp_ohwr_regs_ch_8_ctl_reserved_int <= wrdata_reg(31 downto 1);
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_8_ctl_amp_en_int;
            rddata_reg(31 downto 1) <= rtmlamp_ohwr_regs_ch_8_ctl_reserved_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1011010" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_8_dac_data_int <= wrdata_reg(15 downto 0);
              rtmlamp_ohwr_regs_ch_8_dac_data_swb <= '1';
              rtmlamp_ohwr_regs_ch_8_dac_data_swb_delay <= '1';
              rtmlamp_ohwr_regs_ch_8_dac_wr_int <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_8_dac_wr_int_delay <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_8_dac_reserved_int <= wrdata_reg(31 downto 17);
              rtmlamp_ohwr_regs_ch_8_dac_reserved_swb <= '1';
              rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= rtmlamp_ohwr_regs_ch_8_dac_data_int;
            rddata_reg(16) <= '0';
            rddata_reg(31 downto 17) <= rtmlamp_ohwr_regs_ch_8_dac_reserved_int;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "1011011" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_9_sta_amp_iflag_l_i;
            rddata_reg(1) <= rtmlamp_ohwr_regs_ch_9_sta_amp_tflag_l_i;
            rddata_reg(2) <= rtmlamp_ohwr_regs_ch_9_sta_amp_iflag_r_i;
            rddata_reg(3) <= rtmlamp_ohwr_regs_ch_9_sta_amp_tflag_r_i;
            rddata_reg(31 downto 4) <= rtmlamp_ohwr_regs_ch_9_sta_reserved_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1011100" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_9_ctl_amp_en_int <= wrdata_reg(0);
              rtmlamp_ohwr_regs_ch_9_ctl_reserved_int <= wrdata_reg(31 downto 1);
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_9_ctl_amp_en_int;
            rddata_reg(31 downto 1) <= rtmlamp_ohwr_regs_ch_9_ctl_reserved_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1011101" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_9_dac_data_int <= wrdata_reg(15 downto 0);
              rtmlamp_ohwr_regs_ch_9_dac_data_swb <= '1';
              rtmlamp_ohwr_regs_ch_9_dac_data_swb_delay <= '1';
              rtmlamp_ohwr_regs_ch_9_dac_wr_int <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_9_dac_wr_int_delay <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_9_dac_reserved_int <= wrdata_reg(31 downto 17);
              rtmlamp_ohwr_regs_ch_9_dac_reserved_swb <= '1';
              rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= rtmlamp_ohwr_regs_ch_9_dac_data_int;
            rddata_reg(16) <= '0';
            rddata_reg(31 downto 17) <= rtmlamp_ohwr_regs_ch_9_dac_reserved_int;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "1011110" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_10_sta_amp_iflag_l_i;
            rddata_reg(1) <= rtmlamp_ohwr_regs_ch_10_sta_amp_tflag_l_i;
            rddata_reg(2) <= rtmlamp_ohwr_regs_ch_10_sta_amp_iflag_r_i;
            rddata_reg(3) <= rtmlamp_ohwr_regs_ch_10_sta_amp_tflag_r_i;
            rddata_reg(31 downto 4) <= rtmlamp_ohwr_regs_ch_10_sta_reserved_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1011111" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_10_ctl_amp_en_int <= wrdata_reg(0);
              rtmlamp_ohwr_regs_ch_10_ctl_reserved_int <= wrdata_reg(31 downto 1);
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_10_ctl_amp_en_int;
            rddata_reg(31 downto 1) <= rtmlamp_ohwr_regs_ch_10_ctl_reserved_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1100000" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_10_dac_data_int <= wrdata_reg(15 downto 0);
              rtmlamp_ohwr_regs_ch_10_dac_data_swb <= '1';
              rtmlamp_ohwr_regs_ch_10_dac_data_swb_delay <= '1';
              rtmlamp_ohwr_regs_ch_10_dac_wr_int <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_10_dac_wr_int_delay <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_10_dac_reserved_int <= wrdata_reg(31 downto 17);
              rtmlamp_ohwr_regs_ch_10_dac_reserved_swb <= '1';
              rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= rtmlamp_ohwr_regs_ch_10_dac_data_int;
            rddata_reg(16) <= '0';
            rddata_reg(31 downto 17) <= rtmlamp_ohwr_regs_ch_10_dac_reserved_int;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "1100001" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_11_sta_amp_iflag_l_i;
            rddata_reg(1) <= rtmlamp_ohwr_regs_ch_11_sta_amp_tflag_l_i;
            rddata_reg(2) <= rtmlamp_ohwr_regs_ch_11_sta_amp_iflag_r_i;
            rddata_reg(3) <= rtmlamp_ohwr_regs_ch_11_sta_amp_tflag_r_i;
            rddata_reg(31 downto 4) <= rtmlamp_ohwr_regs_ch_11_sta_reserved_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1100010" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_11_ctl_amp_en_int <= wrdata_reg(0);
              rtmlamp_ohwr_regs_ch_11_ctl_reserved_int <= wrdata_reg(31 downto 1);
            end if;
            rddata_reg(0) <= rtmlamp_ohwr_regs_ch_11_ctl_amp_en_int;
            rddata_reg(31 downto 1) <= rtmlamp_ohwr_regs_ch_11_ctl_reserved_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1100011" =>
            if (wb_we_i = '1') then
              rtmlamp_ohwr_regs_ch_11_dac_data_int <= wrdata_reg(15 downto 0);
              rtmlamp_ohwr_regs_ch_11_dac_data_swb <= '1';
              rtmlamp_ohwr_regs_ch_11_dac_data_swb_delay <= '1';
              rtmlamp_ohwr_regs_ch_11_dac_wr_int <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_11_dac_wr_int_delay <= wrdata_reg(16);
              rtmlamp_ohwr_regs_ch_11_dac_reserved_int <= wrdata_reg(31 downto 17);
              rtmlamp_ohwr_regs_ch_11_dac_reserved_swb <= '1';
              rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= rtmlamp_ohwr_regs_ch_11_dac_data_int;
            rddata_reg(16) <= '0';
            rddata_reg(31 downto 17) <= rtmlamp_ohwr_regs_ch_11_dac_reserved_int;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when others =>
            -- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;


  -- Drive the data output bus
  wb_dat_o <= rddata_reg;
  -- reserved
  -- asynchronous std_logic_vector register : reserved (type RO/WO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_sta_reserved_lwb_s0 <= '0';
      rtmlamp_ohwr_regs_sta_reserved_lwb_s1 <= '0';
      rtmlamp_ohwr_regs_sta_reserved_lwb_s2 <= '0';
      rtmlamp_ohwr_regs_sta_reserved_int <= "00000000000000000000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_sta_reserved_lwb_s0 <= rtmlamp_ohwr_regs_sta_reserved_lwb;
      rtmlamp_ohwr_regs_sta_reserved_lwb_s1 <= rtmlamp_ohwr_regs_sta_reserved_lwb_s0;
      rtmlamp_ohwr_regs_sta_reserved_lwb_s2 <= rtmlamp_ohwr_regs_sta_reserved_lwb_s1;
      if ((rtmlamp_ohwr_regs_sta_reserved_lwb_s1 = '1') and (rtmlamp_ohwr_regs_sta_reserved_lwb_s2 = '0')) then
        rtmlamp_ohwr_regs_sta_reserved_int <= rtmlamp_ohwr_regs_sta_reserved_i;
      end if;
    end if;
  end process;


  -- Use data from WB for DACs
  -- synchronizer chain for field : Use data from WB for DACs (type RW/RO, clk_sys_i <-> dac_master_clk_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ctl_dac_data_from_wb_o <= '0';
      rtmlamp_ohwr_regs_ctl_dac_data_from_wb_sync0 <= '0';
      rtmlamp_ohwr_regs_ctl_dac_data_from_wb_sync1 <= '0';
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ctl_dac_data_from_wb_sync0 <= rtmlamp_ohwr_regs_ctl_dac_data_from_wb_int;
      rtmlamp_ohwr_regs_ctl_dac_data_from_wb_sync1 <= rtmlamp_ohwr_regs_ctl_dac_data_from_wb_sync0;
      rtmlamp_ohwr_regs_ctl_dac_data_from_wb_o <= rtmlamp_ohwr_regs_ctl_dac_data_from_wb_sync1;
    end if;
  end process;


  -- reserved
  -- asynchronous std_logic_vector register : reserved (type RO/WO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ctl_reserved_lwb_s0 <= '0';
      rtmlamp_ohwr_regs_ctl_reserved_lwb_s1 <= '0';
      rtmlamp_ohwr_regs_ctl_reserved_lwb_s2 <= '0';
      rtmlamp_ohwr_regs_ctl_reserved_int <= "0000000000000000000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ctl_reserved_lwb_s0 <= rtmlamp_ohwr_regs_ctl_reserved_lwb;
      rtmlamp_ohwr_regs_ctl_reserved_lwb_s1 <= rtmlamp_ohwr_regs_ctl_reserved_lwb_s0;
      rtmlamp_ohwr_regs_ctl_reserved_lwb_s2 <= rtmlamp_ohwr_regs_ctl_reserved_lwb_s1;
      if ((rtmlamp_ohwr_regs_ctl_reserved_lwb_s1 = '1') and (rtmlamp_ohwr_regs_ctl_reserved_lwb_s2 = '0')) then
        rtmlamp_ohwr_regs_ctl_reserved_int <= rtmlamp_ohwr_regs_ctl_reserved_i;
      end if;
    end if;
  end process;


  -- Amplifier Left Current Limit Flag (IFLAG_L)
  -- Amplifier Left Thermal Limit Flag (TFLAG_L)
  -- Amplifier Right Current Limit Flag (IFLAG_R)
  -- Amplifier Right Thermal Limit Flag (TFLAG_R)
  -- reserved
  -- Amplifier Enable
  rtmlamp_ohwr_regs_ch_0_ctl_amp_en_o <= rtmlamp_ohwr_regs_ch_0_ctl_amp_en_int;
  -- reserved
  rtmlamp_ohwr_regs_ch_0_ctl_reserved_o <= rtmlamp_ohwr_regs_ch_0_ctl_reserved_int;
  -- DAC data
  -- asynchronous std_logic_vector register : DAC data (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_0_dac_data_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_0_dac_data_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_0_dac_data_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_0_dac_data_o <= "0000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_0_dac_data_swb_s0 <= rtmlamp_ohwr_regs_ch_0_dac_data_swb;
      rtmlamp_ohwr_regs_ch_0_dac_data_swb_s1 <= rtmlamp_ohwr_regs_ch_0_dac_data_swb_s0;
      rtmlamp_ohwr_regs_ch_0_dac_data_swb_s2 <= rtmlamp_ohwr_regs_ch_0_dac_data_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_0_dac_data_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_0_dac_data_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_0_dac_data_o <= rtmlamp_ohwr_regs_ch_0_dac_data_int;
      end if;
    end if;
  end process;


  -- Write DAC data to external CI
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_0_dac_wr_o <= '0';
      rtmlamp_ohwr_regs_ch_0_dac_wr_sync0 <= '0';
      rtmlamp_ohwr_regs_ch_0_dac_wr_sync1 <= '0';
      rtmlamp_ohwr_regs_ch_0_dac_wr_sync2 <= '0';
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_0_dac_wr_sync0 <= rtmlamp_ohwr_regs_ch_0_dac_wr_int;
      rtmlamp_ohwr_regs_ch_0_dac_wr_sync1 <= rtmlamp_ohwr_regs_ch_0_dac_wr_sync0;
      rtmlamp_ohwr_regs_ch_0_dac_wr_sync2 <= rtmlamp_ohwr_regs_ch_0_dac_wr_sync1;
      rtmlamp_ohwr_regs_ch_0_dac_wr_o <= rtmlamp_ohwr_regs_ch_0_dac_wr_sync2 and (not rtmlamp_ohwr_regs_ch_0_dac_wr_sync1);
    end if;
  end process;


  -- reserved
  -- asynchronous std_logic_vector register : reserved (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_0_dac_reserved_o <= "000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_s0 <= rtmlamp_ohwr_regs_ch_0_dac_reserved_swb;
      rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_s1 <= rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_s0;
      rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_s2 <= rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_0_dac_reserved_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_0_dac_reserved_o <= rtmlamp_ohwr_regs_ch_0_dac_reserved_int;
      end if;
    end if;
  end process;


  -- Amplifier Left Current Limit Flag (IFLAG_L)
  -- Amplifier Left Thermal Limit Flag (TFLAG_L)
  -- Amplifier Right Current Limit Flag (IFLAG_R)
  -- Amplifier Right Thermal Limit Flag (TFLAG_R)
  -- reserved
  -- Amplifier Enable
  rtmlamp_ohwr_regs_ch_1_ctl_amp_en_o <= rtmlamp_ohwr_regs_ch_1_ctl_amp_en_int;
  -- reserved
  rtmlamp_ohwr_regs_ch_1_ctl_reserved_o <= rtmlamp_ohwr_regs_ch_1_ctl_reserved_int;
  -- DAC data
  -- asynchronous std_logic_vector register : DAC data (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_1_dac_data_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_1_dac_data_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_1_dac_data_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_1_dac_data_o <= "0000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_1_dac_data_swb_s0 <= rtmlamp_ohwr_regs_ch_1_dac_data_swb;
      rtmlamp_ohwr_regs_ch_1_dac_data_swb_s1 <= rtmlamp_ohwr_regs_ch_1_dac_data_swb_s0;
      rtmlamp_ohwr_regs_ch_1_dac_data_swb_s2 <= rtmlamp_ohwr_regs_ch_1_dac_data_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_1_dac_data_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_1_dac_data_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_1_dac_data_o <= rtmlamp_ohwr_regs_ch_1_dac_data_int;
      end if;
    end if;
  end process;


  -- Write DAC data to external CI
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_1_dac_wr_o <= '0';
      rtmlamp_ohwr_regs_ch_1_dac_wr_sync0 <= '0';
      rtmlamp_ohwr_regs_ch_1_dac_wr_sync1 <= '0';
      rtmlamp_ohwr_regs_ch_1_dac_wr_sync2 <= '0';
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_1_dac_wr_sync0 <= rtmlamp_ohwr_regs_ch_1_dac_wr_int;
      rtmlamp_ohwr_regs_ch_1_dac_wr_sync1 <= rtmlamp_ohwr_regs_ch_1_dac_wr_sync0;
      rtmlamp_ohwr_regs_ch_1_dac_wr_sync2 <= rtmlamp_ohwr_regs_ch_1_dac_wr_sync1;
      rtmlamp_ohwr_regs_ch_1_dac_wr_o <= rtmlamp_ohwr_regs_ch_1_dac_wr_sync2 and (not rtmlamp_ohwr_regs_ch_1_dac_wr_sync1);
    end if;
  end process;


  -- reserved
  -- asynchronous std_logic_vector register : reserved (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_1_dac_reserved_o <= "000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_s0 <= rtmlamp_ohwr_regs_ch_1_dac_reserved_swb;
      rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_s1 <= rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_s0;
      rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_s2 <= rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_1_dac_reserved_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_1_dac_reserved_o <= rtmlamp_ohwr_regs_ch_1_dac_reserved_int;
      end if;
    end if;
  end process;


  -- Amplifier Left Current Limit Flag (IFLAG_L)
  -- Amplifier Left Thermal Limit Flag (TFLAG_L)
  -- Amplifier Right Current Limit Flag (IFLAG_R)
  -- Amplifier Right Thermal Limit Flag (TFLAG_R)
  -- reserved
  -- Amplifier Enable
  rtmlamp_ohwr_regs_ch_2_ctl_amp_en_o <= rtmlamp_ohwr_regs_ch_2_ctl_amp_en_int;
  -- reserved
  rtmlamp_ohwr_regs_ch_2_ctl_reserved_o <= rtmlamp_ohwr_regs_ch_2_ctl_reserved_int;
  -- DAC data
  -- asynchronous std_logic_vector register : DAC data (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_2_dac_data_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_2_dac_data_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_2_dac_data_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_2_dac_data_o <= "0000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_2_dac_data_swb_s0 <= rtmlamp_ohwr_regs_ch_2_dac_data_swb;
      rtmlamp_ohwr_regs_ch_2_dac_data_swb_s1 <= rtmlamp_ohwr_regs_ch_2_dac_data_swb_s0;
      rtmlamp_ohwr_regs_ch_2_dac_data_swb_s2 <= rtmlamp_ohwr_regs_ch_2_dac_data_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_2_dac_data_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_2_dac_data_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_2_dac_data_o <= rtmlamp_ohwr_regs_ch_2_dac_data_int;
      end if;
    end if;
  end process;


  -- Write DAC data to external CI
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_2_dac_wr_o <= '0';
      rtmlamp_ohwr_regs_ch_2_dac_wr_sync0 <= '0';
      rtmlamp_ohwr_regs_ch_2_dac_wr_sync1 <= '0';
      rtmlamp_ohwr_regs_ch_2_dac_wr_sync2 <= '0';
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_2_dac_wr_sync0 <= rtmlamp_ohwr_regs_ch_2_dac_wr_int;
      rtmlamp_ohwr_regs_ch_2_dac_wr_sync1 <= rtmlamp_ohwr_regs_ch_2_dac_wr_sync0;
      rtmlamp_ohwr_regs_ch_2_dac_wr_sync2 <= rtmlamp_ohwr_regs_ch_2_dac_wr_sync1;
      rtmlamp_ohwr_regs_ch_2_dac_wr_o <= rtmlamp_ohwr_regs_ch_2_dac_wr_sync2 and (not rtmlamp_ohwr_regs_ch_2_dac_wr_sync1);
    end if;
  end process;


  -- reserved
  -- asynchronous std_logic_vector register : reserved (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_2_dac_reserved_o <= "000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_s0 <= rtmlamp_ohwr_regs_ch_2_dac_reserved_swb;
      rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_s1 <= rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_s0;
      rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_s2 <= rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_2_dac_reserved_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_2_dac_reserved_o <= rtmlamp_ohwr_regs_ch_2_dac_reserved_int;
      end if;
    end if;
  end process;


  -- Amplifier Left Current Limit Flag (IFLAG_L)
  -- Amplifier Left Thermal Limit Flag (TFLAG_L)
  -- Amplifier Right Current Limit Flag (IFLAG_R)
  -- Amplifier Right Thermal Limit Flag (TFLAG_R)
  -- reserved
  -- Amplifier Enable
  rtmlamp_ohwr_regs_ch_3_ctl_amp_en_o <= rtmlamp_ohwr_regs_ch_3_ctl_amp_en_int;
  -- reserved
  rtmlamp_ohwr_regs_ch_3_ctl_reserved_o <= rtmlamp_ohwr_regs_ch_3_ctl_reserved_int;
  -- DAC data
  -- asynchronous std_logic_vector register : DAC data (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_3_dac_data_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_3_dac_data_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_3_dac_data_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_3_dac_data_o <= "0000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_3_dac_data_swb_s0 <= rtmlamp_ohwr_regs_ch_3_dac_data_swb;
      rtmlamp_ohwr_regs_ch_3_dac_data_swb_s1 <= rtmlamp_ohwr_regs_ch_3_dac_data_swb_s0;
      rtmlamp_ohwr_regs_ch_3_dac_data_swb_s2 <= rtmlamp_ohwr_regs_ch_3_dac_data_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_3_dac_data_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_3_dac_data_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_3_dac_data_o <= rtmlamp_ohwr_regs_ch_3_dac_data_int;
      end if;
    end if;
  end process;


  -- Write DAC data to external CI
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_3_dac_wr_o <= '0';
      rtmlamp_ohwr_regs_ch_3_dac_wr_sync0 <= '0';
      rtmlamp_ohwr_regs_ch_3_dac_wr_sync1 <= '0';
      rtmlamp_ohwr_regs_ch_3_dac_wr_sync2 <= '0';
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_3_dac_wr_sync0 <= rtmlamp_ohwr_regs_ch_3_dac_wr_int;
      rtmlamp_ohwr_regs_ch_3_dac_wr_sync1 <= rtmlamp_ohwr_regs_ch_3_dac_wr_sync0;
      rtmlamp_ohwr_regs_ch_3_dac_wr_sync2 <= rtmlamp_ohwr_regs_ch_3_dac_wr_sync1;
      rtmlamp_ohwr_regs_ch_3_dac_wr_o <= rtmlamp_ohwr_regs_ch_3_dac_wr_sync2 and (not rtmlamp_ohwr_regs_ch_3_dac_wr_sync1);
    end if;
  end process;


  -- reserved
  -- asynchronous std_logic_vector register : reserved (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_3_dac_reserved_o <= "000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_s0 <= rtmlamp_ohwr_regs_ch_3_dac_reserved_swb;
      rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_s1 <= rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_s0;
      rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_s2 <= rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_3_dac_reserved_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_3_dac_reserved_o <= rtmlamp_ohwr_regs_ch_3_dac_reserved_int;
      end if;
    end if;
  end process;


  -- Amplifier Left Current Limit Flag (IFLAG_L)
  -- Amplifier Left Thermal Limit Flag (TFLAG_L)
  -- Amplifier Right Current Limit Flag (IFLAG_R)
  -- Amplifier Right Thermal Limit Flag (TFLAG_R)
  -- reserved
  -- Amplifier Enable
  rtmlamp_ohwr_regs_ch_4_ctl_amp_en_o <= rtmlamp_ohwr_regs_ch_4_ctl_amp_en_int;
  -- reserved
  rtmlamp_ohwr_regs_ch_4_ctl_reserved_o <= rtmlamp_ohwr_regs_ch_4_ctl_reserved_int;
  -- DAC data
  -- asynchronous std_logic_vector register : DAC data (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_4_dac_data_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_4_dac_data_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_4_dac_data_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_4_dac_data_o <= "0000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_4_dac_data_swb_s0 <= rtmlamp_ohwr_regs_ch_4_dac_data_swb;
      rtmlamp_ohwr_regs_ch_4_dac_data_swb_s1 <= rtmlamp_ohwr_regs_ch_4_dac_data_swb_s0;
      rtmlamp_ohwr_regs_ch_4_dac_data_swb_s2 <= rtmlamp_ohwr_regs_ch_4_dac_data_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_4_dac_data_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_4_dac_data_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_4_dac_data_o <= rtmlamp_ohwr_regs_ch_4_dac_data_int;
      end if;
    end if;
  end process;


  -- Write DAC data to external CI
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_4_dac_wr_o <= '0';
      rtmlamp_ohwr_regs_ch_4_dac_wr_sync0 <= '0';
      rtmlamp_ohwr_regs_ch_4_dac_wr_sync1 <= '0';
      rtmlamp_ohwr_regs_ch_4_dac_wr_sync2 <= '0';
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_4_dac_wr_sync0 <= rtmlamp_ohwr_regs_ch_4_dac_wr_int;
      rtmlamp_ohwr_regs_ch_4_dac_wr_sync1 <= rtmlamp_ohwr_regs_ch_4_dac_wr_sync0;
      rtmlamp_ohwr_regs_ch_4_dac_wr_sync2 <= rtmlamp_ohwr_regs_ch_4_dac_wr_sync1;
      rtmlamp_ohwr_regs_ch_4_dac_wr_o <= rtmlamp_ohwr_regs_ch_4_dac_wr_sync2 and (not rtmlamp_ohwr_regs_ch_4_dac_wr_sync1);
    end if;
  end process;


  -- reserved
  -- asynchronous std_logic_vector register : reserved (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_4_dac_reserved_o <= "000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_s0 <= rtmlamp_ohwr_regs_ch_4_dac_reserved_swb;
      rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_s1 <= rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_s0;
      rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_s2 <= rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_4_dac_reserved_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_4_dac_reserved_o <= rtmlamp_ohwr_regs_ch_4_dac_reserved_int;
      end if;
    end if;
  end process;


  -- Amplifier Left Current Limit Flag (IFLAG_L)
  -- Amplifier Left Thermal Limit Flag (TFLAG_L)
  -- Amplifier Right Current Limit Flag (IFLAG_R)
  -- Amplifier Right Thermal Limit Flag (TFLAG_R)
  -- reserved
  -- Amplifier Enable
  rtmlamp_ohwr_regs_ch_5_ctl_amp_en_o <= rtmlamp_ohwr_regs_ch_5_ctl_amp_en_int;
  -- reserved
  rtmlamp_ohwr_regs_ch_5_ctl_reserved_o <= rtmlamp_ohwr_regs_ch_5_ctl_reserved_int;
  -- DAC data
  -- asynchronous std_logic_vector register : DAC data (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_5_dac_data_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_5_dac_data_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_5_dac_data_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_5_dac_data_o <= "0000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_5_dac_data_swb_s0 <= rtmlamp_ohwr_regs_ch_5_dac_data_swb;
      rtmlamp_ohwr_regs_ch_5_dac_data_swb_s1 <= rtmlamp_ohwr_regs_ch_5_dac_data_swb_s0;
      rtmlamp_ohwr_regs_ch_5_dac_data_swb_s2 <= rtmlamp_ohwr_regs_ch_5_dac_data_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_5_dac_data_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_5_dac_data_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_5_dac_data_o <= rtmlamp_ohwr_regs_ch_5_dac_data_int;
      end if;
    end if;
  end process;


  -- Write DAC data to external CI
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_5_dac_wr_o <= '0';
      rtmlamp_ohwr_regs_ch_5_dac_wr_sync0 <= '0';
      rtmlamp_ohwr_regs_ch_5_dac_wr_sync1 <= '0';
      rtmlamp_ohwr_regs_ch_5_dac_wr_sync2 <= '0';
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_5_dac_wr_sync0 <= rtmlamp_ohwr_regs_ch_5_dac_wr_int;
      rtmlamp_ohwr_regs_ch_5_dac_wr_sync1 <= rtmlamp_ohwr_regs_ch_5_dac_wr_sync0;
      rtmlamp_ohwr_regs_ch_5_dac_wr_sync2 <= rtmlamp_ohwr_regs_ch_5_dac_wr_sync1;
      rtmlamp_ohwr_regs_ch_5_dac_wr_o <= rtmlamp_ohwr_regs_ch_5_dac_wr_sync2 and (not rtmlamp_ohwr_regs_ch_5_dac_wr_sync1);
    end if;
  end process;


  -- reserved
  -- asynchronous std_logic_vector register : reserved (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_5_dac_reserved_o <= "000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_s0 <= rtmlamp_ohwr_regs_ch_5_dac_reserved_swb;
      rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_s1 <= rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_s0;
      rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_s2 <= rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_5_dac_reserved_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_5_dac_reserved_o <= rtmlamp_ohwr_regs_ch_5_dac_reserved_int;
      end if;
    end if;
  end process;


  -- Amplifier Left Current Limit Flag (IFLAG_L)
  -- Amplifier Left Thermal Limit Flag (TFLAG_L)
  -- Amplifier Right Current Limit Flag (IFLAG_R)
  -- Amplifier Right Thermal Limit Flag (TFLAG_R)
  -- reserved
  -- Amplifier Enable
  rtmlamp_ohwr_regs_ch_6_ctl_amp_en_o <= rtmlamp_ohwr_regs_ch_6_ctl_amp_en_int;
  -- reserved
  rtmlamp_ohwr_regs_ch_6_ctl_reserved_o <= rtmlamp_ohwr_regs_ch_6_ctl_reserved_int;
  -- DAC data
  -- asynchronous std_logic_vector register : DAC data (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_6_dac_data_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_6_dac_data_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_6_dac_data_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_6_dac_data_o <= "0000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_6_dac_data_swb_s0 <= rtmlamp_ohwr_regs_ch_6_dac_data_swb;
      rtmlamp_ohwr_regs_ch_6_dac_data_swb_s1 <= rtmlamp_ohwr_regs_ch_6_dac_data_swb_s0;
      rtmlamp_ohwr_regs_ch_6_dac_data_swb_s2 <= rtmlamp_ohwr_regs_ch_6_dac_data_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_6_dac_data_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_6_dac_data_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_6_dac_data_o <= rtmlamp_ohwr_regs_ch_6_dac_data_int;
      end if;
    end if;
  end process;


  -- Write DAC data to external CI
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_6_dac_wr_o <= '0';
      rtmlamp_ohwr_regs_ch_6_dac_wr_sync0 <= '0';
      rtmlamp_ohwr_regs_ch_6_dac_wr_sync1 <= '0';
      rtmlamp_ohwr_regs_ch_6_dac_wr_sync2 <= '0';
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_6_dac_wr_sync0 <= rtmlamp_ohwr_regs_ch_6_dac_wr_int;
      rtmlamp_ohwr_regs_ch_6_dac_wr_sync1 <= rtmlamp_ohwr_regs_ch_6_dac_wr_sync0;
      rtmlamp_ohwr_regs_ch_6_dac_wr_sync2 <= rtmlamp_ohwr_regs_ch_6_dac_wr_sync1;
      rtmlamp_ohwr_regs_ch_6_dac_wr_o <= rtmlamp_ohwr_regs_ch_6_dac_wr_sync2 and (not rtmlamp_ohwr_regs_ch_6_dac_wr_sync1);
    end if;
  end process;


  -- reserved
  -- asynchronous std_logic_vector register : reserved (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_6_dac_reserved_o <= "000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_s0 <= rtmlamp_ohwr_regs_ch_6_dac_reserved_swb;
      rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_s1 <= rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_s0;
      rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_s2 <= rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_6_dac_reserved_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_6_dac_reserved_o <= rtmlamp_ohwr_regs_ch_6_dac_reserved_int;
      end if;
    end if;
  end process;


  -- Amplifier Left Current Limit Flag (IFLAG_L)
  -- Amplifier Left Thermal Limit Flag (TFLAG_L)
  -- Amplifier Right Current Limit Flag (IFLAG_R)
  -- Amplifier Right Thermal Limit Flag (TFLAG_R)
  -- reserved
  -- Amplifier Enable
  rtmlamp_ohwr_regs_ch_7_ctl_amp_en_o <= rtmlamp_ohwr_regs_ch_7_ctl_amp_en_int;
  -- reserved
  rtmlamp_ohwr_regs_ch_7_ctl_reserved_o <= rtmlamp_ohwr_regs_ch_7_ctl_reserved_int;
  -- DAC data
  -- asynchronous std_logic_vector register : DAC data (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_7_dac_data_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_7_dac_data_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_7_dac_data_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_7_dac_data_o <= "0000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_7_dac_data_swb_s0 <= rtmlamp_ohwr_regs_ch_7_dac_data_swb;
      rtmlamp_ohwr_regs_ch_7_dac_data_swb_s1 <= rtmlamp_ohwr_regs_ch_7_dac_data_swb_s0;
      rtmlamp_ohwr_regs_ch_7_dac_data_swb_s2 <= rtmlamp_ohwr_regs_ch_7_dac_data_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_7_dac_data_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_7_dac_data_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_7_dac_data_o <= rtmlamp_ohwr_regs_ch_7_dac_data_int;
      end if;
    end if;
  end process;


  -- Write DAC data to external CI
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_7_dac_wr_o <= '0';
      rtmlamp_ohwr_regs_ch_7_dac_wr_sync0 <= '0';
      rtmlamp_ohwr_regs_ch_7_dac_wr_sync1 <= '0';
      rtmlamp_ohwr_regs_ch_7_dac_wr_sync2 <= '0';
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_7_dac_wr_sync0 <= rtmlamp_ohwr_regs_ch_7_dac_wr_int;
      rtmlamp_ohwr_regs_ch_7_dac_wr_sync1 <= rtmlamp_ohwr_regs_ch_7_dac_wr_sync0;
      rtmlamp_ohwr_regs_ch_7_dac_wr_sync2 <= rtmlamp_ohwr_regs_ch_7_dac_wr_sync1;
      rtmlamp_ohwr_regs_ch_7_dac_wr_o <= rtmlamp_ohwr_regs_ch_7_dac_wr_sync2 and (not rtmlamp_ohwr_regs_ch_7_dac_wr_sync1);
    end if;
  end process;


  -- reserved
  -- asynchronous std_logic_vector register : reserved (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_7_dac_reserved_o <= "000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_s0 <= rtmlamp_ohwr_regs_ch_7_dac_reserved_swb;
      rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_s1 <= rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_s0;
      rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_s2 <= rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_7_dac_reserved_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_7_dac_reserved_o <= rtmlamp_ohwr_regs_ch_7_dac_reserved_int;
      end if;
    end if;
  end process;


  -- Amplifier Left Current Limit Flag (IFLAG_L)
  -- Amplifier Left Thermal Limit Flag (TFLAG_L)
  -- Amplifier Right Current Limit Flag (IFLAG_R)
  -- Amplifier Right Thermal Limit Flag (TFLAG_R)
  -- reserved
  -- Amplifier Enable
  rtmlamp_ohwr_regs_ch_8_ctl_amp_en_o <= rtmlamp_ohwr_regs_ch_8_ctl_amp_en_int;
  -- reserved
  rtmlamp_ohwr_regs_ch_8_ctl_reserved_o <= rtmlamp_ohwr_regs_ch_8_ctl_reserved_int;
  -- DAC data
  -- asynchronous std_logic_vector register : DAC data (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_8_dac_data_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_8_dac_data_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_8_dac_data_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_8_dac_data_o <= "0000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_8_dac_data_swb_s0 <= rtmlamp_ohwr_regs_ch_8_dac_data_swb;
      rtmlamp_ohwr_regs_ch_8_dac_data_swb_s1 <= rtmlamp_ohwr_regs_ch_8_dac_data_swb_s0;
      rtmlamp_ohwr_regs_ch_8_dac_data_swb_s2 <= rtmlamp_ohwr_regs_ch_8_dac_data_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_8_dac_data_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_8_dac_data_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_8_dac_data_o <= rtmlamp_ohwr_regs_ch_8_dac_data_int;
      end if;
    end if;
  end process;


  -- Write DAC data to external CI
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_8_dac_wr_o <= '0';
      rtmlamp_ohwr_regs_ch_8_dac_wr_sync0 <= '0';
      rtmlamp_ohwr_regs_ch_8_dac_wr_sync1 <= '0';
      rtmlamp_ohwr_regs_ch_8_dac_wr_sync2 <= '0';
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_8_dac_wr_sync0 <= rtmlamp_ohwr_regs_ch_8_dac_wr_int;
      rtmlamp_ohwr_regs_ch_8_dac_wr_sync1 <= rtmlamp_ohwr_regs_ch_8_dac_wr_sync0;
      rtmlamp_ohwr_regs_ch_8_dac_wr_sync2 <= rtmlamp_ohwr_regs_ch_8_dac_wr_sync1;
      rtmlamp_ohwr_regs_ch_8_dac_wr_o <= rtmlamp_ohwr_regs_ch_8_dac_wr_sync2 and (not rtmlamp_ohwr_regs_ch_8_dac_wr_sync1);
    end if;
  end process;


  -- reserved
  -- asynchronous std_logic_vector register : reserved (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_8_dac_reserved_o <= "000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_s0 <= rtmlamp_ohwr_regs_ch_8_dac_reserved_swb;
      rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_s1 <= rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_s0;
      rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_s2 <= rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_8_dac_reserved_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_8_dac_reserved_o <= rtmlamp_ohwr_regs_ch_8_dac_reserved_int;
      end if;
    end if;
  end process;


  -- Amplifier Left Current Limit Flag (IFLAG_L)
  -- Amplifier Left Thermal Limit Flag (TFLAG_L)
  -- Amplifier Right Current Limit Flag (IFLAG_R)
  -- Amplifier Right Thermal Limit Flag (TFLAG_R)
  -- reserved
  -- Amplifier Enable
  rtmlamp_ohwr_regs_ch_9_ctl_amp_en_o <= rtmlamp_ohwr_regs_ch_9_ctl_amp_en_int;
  -- reserved
  rtmlamp_ohwr_regs_ch_9_ctl_reserved_o <= rtmlamp_ohwr_regs_ch_9_ctl_reserved_int;
  -- DAC data
  -- asynchronous std_logic_vector register : DAC data (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_9_dac_data_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_9_dac_data_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_9_dac_data_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_9_dac_data_o <= "0000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_9_dac_data_swb_s0 <= rtmlamp_ohwr_regs_ch_9_dac_data_swb;
      rtmlamp_ohwr_regs_ch_9_dac_data_swb_s1 <= rtmlamp_ohwr_regs_ch_9_dac_data_swb_s0;
      rtmlamp_ohwr_regs_ch_9_dac_data_swb_s2 <= rtmlamp_ohwr_regs_ch_9_dac_data_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_9_dac_data_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_9_dac_data_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_9_dac_data_o <= rtmlamp_ohwr_regs_ch_9_dac_data_int;
      end if;
    end if;
  end process;


  -- Write DAC data to external CI
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_9_dac_wr_o <= '0';
      rtmlamp_ohwr_regs_ch_9_dac_wr_sync0 <= '0';
      rtmlamp_ohwr_regs_ch_9_dac_wr_sync1 <= '0';
      rtmlamp_ohwr_regs_ch_9_dac_wr_sync2 <= '0';
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_9_dac_wr_sync0 <= rtmlamp_ohwr_regs_ch_9_dac_wr_int;
      rtmlamp_ohwr_regs_ch_9_dac_wr_sync1 <= rtmlamp_ohwr_regs_ch_9_dac_wr_sync0;
      rtmlamp_ohwr_regs_ch_9_dac_wr_sync2 <= rtmlamp_ohwr_regs_ch_9_dac_wr_sync1;
      rtmlamp_ohwr_regs_ch_9_dac_wr_o <= rtmlamp_ohwr_regs_ch_9_dac_wr_sync2 and (not rtmlamp_ohwr_regs_ch_9_dac_wr_sync1);
    end if;
  end process;


  -- reserved
  -- asynchronous std_logic_vector register : reserved (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_9_dac_reserved_o <= "000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_s0 <= rtmlamp_ohwr_regs_ch_9_dac_reserved_swb;
      rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_s1 <= rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_s0;
      rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_s2 <= rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_9_dac_reserved_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_9_dac_reserved_o <= rtmlamp_ohwr_regs_ch_9_dac_reserved_int;
      end if;
    end if;
  end process;


  -- Amplifier Left Current Limit Flag (IFLAG_L)
  -- Amplifier Left Thermal Limit Flag (TFLAG_L)
  -- Amplifier Right Current Limit Flag (IFLAG_R)
  -- Amplifier Right Thermal Limit Flag (TFLAG_R)
  -- reserved
  -- Amplifier Enable
  rtmlamp_ohwr_regs_ch_10_ctl_amp_en_o <= rtmlamp_ohwr_regs_ch_10_ctl_amp_en_int;
  -- reserved
  rtmlamp_ohwr_regs_ch_10_ctl_reserved_o <= rtmlamp_ohwr_regs_ch_10_ctl_reserved_int;
  -- DAC data
  -- asynchronous std_logic_vector register : DAC data (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_10_dac_data_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_10_dac_data_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_10_dac_data_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_10_dac_data_o <= "0000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_10_dac_data_swb_s0 <= rtmlamp_ohwr_regs_ch_10_dac_data_swb;
      rtmlamp_ohwr_regs_ch_10_dac_data_swb_s1 <= rtmlamp_ohwr_regs_ch_10_dac_data_swb_s0;
      rtmlamp_ohwr_regs_ch_10_dac_data_swb_s2 <= rtmlamp_ohwr_regs_ch_10_dac_data_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_10_dac_data_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_10_dac_data_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_10_dac_data_o <= rtmlamp_ohwr_regs_ch_10_dac_data_int;
      end if;
    end if;
  end process;


  -- Write DAC data to external CI
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_10_dac_wr_o <= '0';
      rtmlamp_ohwr_regs_ch_10_dac_wr_sync0 <= '0';
      rtmlamp_ohwr_regs_ch_10_dac_wr_sync1 <= '0';
      rtmlamp_ohwr_regs_ch_10_dac_wr_sync2 <= '0';
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_10_dac_wr_sync0 <= rtmlamp_ohwr_regs_ch_10_dac_wr_int;
      rtmlamp_ohwr_regs_ch_10_dac_wr_sync1 <= rtmlamp_ohwr_regs_ch_10_dac_wr_sync0;
      rtmlamp_ohwr_regs_ch_10_dac_wr_sync2 <= rtmlamp_ohwr_regs_ch_10_dac_wr_sync1;
      rtmlamp_ohwr_regs_ch_10_dac_wr_o <= rtmlamp_ohwr_regs_ch_10_dac_wr_sync2 and (not rtmlamp_ohwr_regs_ch_10_dac_wr_sync1);
    end if;
  end process;


  -- reserved
  -- asynchronous std_logic_vector register : reserved (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_10_dac_reserved_o <= "000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_s0 <= rtmlamp_ohwr_regs_ch_10_dac_reserved_swb;
      rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_s1 <= rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_s0;
      rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_s2 <= rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_10_dac_reserved_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_10_dac_reserved_o <= rtmlamp_ohwr_regs_ch_10_dac_reserved_int;
      end if;
    end if;
  end process;


  -- Amplifier Left Current Limit Flag (IFLAG_L)
  -- Amplifier Left Thermal Limit Flag (TFLAG_L)
  -- Amplifier Right Current Limit Flag (IFLAG_R)
  -- Amplifier Right Thermal Limit Flag (TFLAG_R)
  -- reserved
  -- Amplifier Enable
  rtmlamp_ohwr_regs_ch_11_ctl_amp_en_o <= rtmlamp_ohwr_regs_ch_11_ctl_amp_en_int;
  -- reserved
  rtmlamp_ohwr_regs_ch_11_ctl_reserved_o <= rtmlamp_ohwr_regs_ch_11_ctl_reserved_int;
  -- DAC data
  -- asynchronous std_logic_vector register : DAC data (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_11_dac_data_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_11_dac_data_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_11_dac_data_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_11_dac_data_o <= "0000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_11_dac_data_swb_s0 <= rtmlamp_ohwr_regs_ch_11_dac_data_swb;
      rtmlamp_ohwr_regs_ch_11_dac_data_swb_s1 <= rtmlamp_ohwr_regs_ch_11_dac_data_swb_s0;
      rtmlamp_ohwr_regs_ch_11_dac_data_swb_s2 <= rtmlamp_ohwr_regs_ch_11_dac_data_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_11_dac_data_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_11_dac_data_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_11_dac_data_o <= rtmlamp_ohwr_regs_ch_11_dac_data_int;
      end if;
    end if;
  end process;


  -- Write DAC data to external CI
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_11_dac_wr_o <= '0';
      rtmlamp_ohwr_regs_ch_11_dac_wr_sync0 <= '0';
      rtmlamp_ohwr_regs_ch_11_dac_wr_sync1 <= '0';
      rtmlamp_ohwr_regs_ch_11_dac_wr_sync2 <= '0';
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_11_dac_wr_sync0 <= rtmlamp_ohwr_regs_ch_11_dac_wr_int;
      rtmlamp_ohwr_regs_ch_11_dac_wr_sync1 <= rtmlamp_ohwr_regs_ch_11_dac_wr_sync0;
      rtmlamp_ohwr_regs_ch_11_dac_wr_sync2 <= rtmlamp_ohwr_regs_ch_11_dac_wr_sync1;
      rtmlamp_ohwr_regs_ch_11_dac_wr_o <= rtmlamp_ohwr_regs_ch_11_dac_wr_sync2 and (not rtmlamp_ohwr_regs_ch_11_dac_wr_sync1);
    end if;
  end process;


  -- reserved
  -- asynchronous std_logic_vector register : reserved (type RW/RO, dac_master_clk_i <-> clk_sys_i)
  process (dac_master_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_s0 <= '0';
      rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_s1 <= '0';
      rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_s2 <= '0';
      rtmlamp_ohwr_regs_ch_11_dac_reserved_o <= "000000000000000";
    elsif rising_edge(dac_master_clk_i) then
      rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_s0 <= rtmlamp_ohwr_regs_ch_11_dac_reserved_swb;
      rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_s1 <= rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_s0;
      rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_s2 <= rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_s1;
      if ((rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_s2 = '0') and (rtmlamp_ohwr_regs_ch_11_dac_reserved_swb_s1 = '1')) then
        rtmlamp_ohwr_regs_ch_11_dac_reserved_o <= rtmlamp_ohwr_regs_ch_11_dac_reserved_int;
      end if;
    end if;
  end process;


  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
  -- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
